/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./test/flow/editor.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/NodeQue.ts":
/*!************************!*\
  !*** ./src/NodeQue.ts ***!
  \************************/
/*! exports provided: NodeQue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NodeQue\", function() { return NodeQue; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"./src/util.ts\");\n/* harmony import */ var _node_NodeBegin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node/NodeBegin */ \"./src/node/NodeBegin.ts\");\n/* harmony import */ var _node_NodeTask__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node/NodeTask */ \"./src/node/NodeTask.ts\");\n/* harmony import */ var _node_NodeAudit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node/NodeAudit */ \"./src/node/NodeAudit.ts\");\n/* harmony import */ var _node_NodeSign__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node/NodeSign */ \"./src/node/NodeSign.ts\");\n/* harmony import */ var _node_NodeCond__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node/NodeCond */ \"./src/node/NodeCond.ts\");\n/* harmony import */ var _node_NodeSubFlow__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node/NodeSubFlow */ \"./src/node/NodeSubFlow.ts\");\n/* harmony import */ var _node_NodeParallel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node/NodeParallel */ \"./src/node/NodeParallel.ts\");\n/* harmony import */ var _node_NodeMerge__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./node/NodeMerge */ \"./src/node/NodeMerge.ts\");\n/* harmony import */ var _node_NodeEnd__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./node/NodeEnd */ \"./src/node/NodeEnd.ts\");\n/* harmony import */ var _node_NodeLn__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./node/NodeLn */ \"./src/node/NodeLn.ts\");\n/* harmony import */ var _node_NodeLnPoly__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./node/NodeLnPoly */ \"./src/node/NodeLnPoly.ts\");\n/* harmony import */ var _node_NodeText__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./node/NodeText */ \"./src/node/NodeText.ts\");\n/**\r\n * 2018年3月29日 星期四\r\n * 节点队列\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//export \r\nvar NodeQue = /** @class */ (function () {\r\n    function NodeQue(paper) {\r\n        this.paper = paper;\r\n    }\r\n    /**\r\n     * 生成节点\r\n     * @param NodeType\r\n     * @param nOpt\r\n     */\r\n    NodeQue.prototype.make = function (NodeType, nOpt) {\r\n        var name = _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].ucFirst(NodeType), paper = this.paper;\r\n        var ist;\r\n        // var ist: any\r\n        switch (name) {\r\n            case 'Begin':\r\n                ist = new _node_NodeBegin__WEBPACK_IMPORTED_MODULE_1__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'Task':\r\n                ist = new _node_NodeTask__WEBPACK_IMPORTED_MODULE_2__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'Audit':\r\n                ist = new _node_NodeAudit__WEBPACK_IMPORTED_MODULE_3__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'Sign':\r\n                ist = new _node_NodeSign__WEBPACK_IMPORTED_MODULE_4__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'Cond':\r\n                ist = new _node_NodeCond__WEBPACK_IMPORTED_MODULE_5__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'SubFlow':\r\n                ist = new _node_NodeSubFlow__WEBPACK_IMPORTED_MODULE_6__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'Parallel':\r\n                ist = new _node_NodeParallel__WEBPACK_IMPORTED_MODULE_7__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'Merge':\r\n                ist = new _node_NodeMerge__WEBPACK_IMPORTED_MODULE_8__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'End':\r\n                ist = new _node_NodeEnd__WEBPACK_IMPORTED_MODULE_9__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'Ln':\r\n                ist = new _node_NodeLn__WEBPACK_IMPORTED_MODULE_10__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'LnPoly':\r\n                ist = new _node_NodeLnPoly__WEBPACK_IMPORTED_MODULE_11__[\"default\"](paper, nOpt);\r\n                break;\r\n            case 'Text':\r\n                ist = new _node_NodeText__WEBPACK_IMPORTED_MODULE_12__[\"default\"](paper, nOpt);\r\n                break;\r\n        }\r\n        return ist;\r\n    };\r\n    return NodeQue;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack:///./src/NodeQue.ts?");

/***/ }),

/***/ "./src/ObjX.ts":
/*!*********************!*\
  !*** ./src/ObjX.ts ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\r\n * 2018年3月30日 星期五\r\n * Object 类型扩展类\r\n */\r\nvar ObjX = /** @class */ (function () {\r\n    function ObjX(jsonObj) {\r\n        if ('object' == typeof jsonObj && !(jsonObj instanceof Array)) {\r\n            this.jsonObj = jsonObj;\r\n        }\r\n        else {\r\n            this.jsonObj = {};\r\n        }\r\n    }\r\n    /**\r\n     * 参数获取\r\n     * @param key\r\n     * @param def\r\n     */\r\n    ObjX.prototype.get = function (key, def) {\r\n        if ('undefined' != typeof this.jsonObj[key]) {\r\n            return this.jsonObj[key];\r\n        }\r\n        else {\r\n            return def;\r\n        }\r\n    };\r\n    // 设置值\r\n    ObjX.prototype.set = function (key, value) {\r\n        this.jsonObj[key] = value;\r\n        return this;\r\n    };\r\n    // 获取值\r\n    ObjX.value = function (json, key, def) {\r\n        if ('object' == typeof json) {\r\n            return 'undefined' == typeof json[key] ? def : json[key];\r\n        }\r\n        return def;\r\n    };\r\n    return ObjX;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (ObjX);\r\n\n\n//# sourceURL=webpack:///./src/ObjX.ts?");

/***/ }),

/***/ "./src/ToolBar.ts":
/*!************************!*\
  !*** ./src/ToolBar.ts ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeQue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeQue */ \"./src/NodeQue.ts\");\n/* harmony import */ var _ObjX__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ObjX */ \"./src/ObjX.ts\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"./src/util.ts\");\n/* harmony import */ var _confNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./confNode */ \"./src/confNode.ts\");\n\r\n\r\n\r\n\r\n/**\r\n * 2018年3月29日 星期四\r\n * 工具栏\r\n */\r\nvar ToolBar = /** @class */ (function () {\r\n    /**\r\n     * @param {RaphaelPaper} paper\r\n     * @param {rSu.bsMap} opt\r\n     */\r\n    function ToolBar(paper, opt) {\r\n        this._tools = []; // 工具栏\r\n        this.rData = {\r\n            cp: { x: 5, y: 5 },\r\n            th0: 23,\r\n            th1: 23,\r\n            th2: 23,\r\n            nh: 0,\r\n            ch: 0,\r\n            cw: 75 // 整个容器的宽度\r\n        };\r\n        this.paper = paper;\r\n        this.ndMer = new _NodeQue__WEBPACK_IMPORTED_MODULE_0__[\"NodeQue\"](this.paper);\r\n        this.option = opt;\r\n        this.config = opt.toolBar || {};\r\n        // 图标处理\r\n        var hasIcon = false;\r\n        if (!this.config.hasIcon && (this.config.aUpSrc || this.config.aDownSrc)) {\r\n            hasIcon = true;\r\n        }\r\n        else {\r\n            hasIcon = this.config.hasIcon || false;\r\n        }\r\n        this.config.aUpSrc = _ObjX__WEBPACK_IMPORTED_MODULE_1__[\"default\"].value(this.config, 'aUpSrc', hasIcon ? 'arrow_up.png' : null);\r\n        this.config.aDownSrc = _ObjX__WEBPACK_IMPORTED_MODULE_1__[\"default\"].value(this.config, 'aDownSrc', hasIcon ? 'arrow_down.png' : null);\r\n        // 属性初始化\r\n        this.tBodyNds = [];\r\n        this.connElems = {};\r\n        this.cBodyNds = {};\r\n        this.tBodyNds = {};\r\n        this.newToolBar();\r\n    }\r\n    /**\r\n     * 折线坐标点生成器\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} lx\r\n     * @param {number} ly\r\n     * @returns {{P1: {x: number; y: number}; P2: {x: number; y: number}; h: number}}\r\n     * @private\r\n     */\r\n    ToolBar.prototype._lnPolyConXyCrt = function (x, y, lx, ly) {\r\n        var polyAttr = {\r\n            P1: { x: lx - 50, y: ly - 5 },\r\n            P2: { x: lx + 2, y: ly + 2 },\r\n            h: 4\r\n        };\r\n        return polyAttr;\r\n    };\r\n    /**\r\n     * 直线坐标点生成器\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} lx\r\n     * @param {number} ly\r\n     * @returns {{P1: {x: number; y: number}; P2: {x: number; y: number}}}\r\n     * @private\r\n     */\r\n    ToolBar.prototype._lnConXyCrt = function (x, y, lx, ly) {\r\n        var lnAttr = {\r\n            P1: { x: lx - 50, y: ly },\r\n            P2: { x: lx + 2, y: ly }\r\n        };\r\n        return lnAttr;\r\n    };\r\n    /**\r\n     * 连线框占据节点框\r\n     * @param {boolean} backMk\r\n     */\r\n    ToolBar.prototype.connSizeNode = function (backMk) {\r\n        var _a = this.connElems, title = _a.title, icon = _a.icon, lnCon = _a.lnCon, lnPolyCon = _a.lnPolyCon, _b = this.rData, cp = _b.cp, cw = _b.cw, th2 = _b.th2, ch = _b.ch, th0 = _b.th0, th1 = _b.th1, nh = _b.nh, x = cp.x, y = cp.y, _c = this.cBodyNds, ln = _c.ln, lnPoly = _c.lnPoly;\r\n        y += backMk ? th0 + th1 + nh : th0 + th1;\r\n        title.attr('y', y);\r\n        icon.attr('y', y + 1);\r\n        y += th2;\r\n        var prevH = 60; // 预处理高度\r\n        lnCon.attr('y', y);\r\n        // 直线\r\n        var ly = y + prevH / 4 * 0.7, lx = x + 20;\r\n        ln.updAttr(this._lnConXyCrt(x, y, lx, ly));\r\n        // 折线\r\n        y += 20;\r\n        lnPolyCon.attr('y', y);\r\n        ly = y + prevH / 4 * 0.7,\r\n            lx = x + 20;\r\n        lnPoly.opt.MPs = [];\r\n        lnPoly.updAttr(this._lnPolyConXyCrt(x, y, lx, ly));\r\n    };\r\n    /**\r\n     * 标题栏显示与隐藏\r\n     * @param {string} type 显示与隐藏， H/S\r\n     * @param {boolean} includeTit 包含标题\r\n     */\r\n    ToolBar.prototype.tToggle = function (type, includeTit) {\r\n        var tBodyNds = this.tBodyNds, nodeElems = this.nodeElems, tBody = nodeElems.tBody;\r\n        if ('H' != type) {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(tBodyNds, function (k, nd) {\r\n                nd.show();\r\n            });\r\n            if (includeTit) {\r\n                nodeElems.title.show();\r\n                nodeElems.icon.show();\r\n            }\r\n            if (tBody) {\r\n                tBody.show();\r\n            }\r\n            this.connSizeNode(true);\r\n        }\r\n        else {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(tBodyNds, function (k, nd) {\r\n                nd.hide();\r\n            });\r\n            if (includeTit) {\r\n                nodeElems.title.hide();\r\n                nodeElems.icon.hide();\r\n            }\r\n            if (tBody) {\r\n                tBody.hide();\r\n            }\r\n            this.connSizeNode();\r\n        }\r\n    };\r\n    /**\r\n     * 标题栏显示与隐藏\r\n     * @param {string} type 显示与隐藏， H/S\r\n     * @param {boolean} includeTit 包含提示文本\r\n     */\r\n    ToolBar.prototype.cToggle = function (type, includeTit) {\r\n        var cBodyNds = this.cBodyNds, connElems = this.connElems, lnCon = connElems.lnCon, lnPolyCon = connElems.lnPolyCon;\r\n        if ('H' != type) {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(cBodyNds, function (k, nd) {\r\n                nd.show();\r\n            });\r\n            if (includeTit) {\r\n                connElems.title.show();\r\n                connElems.icon.show();\r\n            }\r\n            if (lnCon) {\r\n                lnCon.show();\r\n            }\r\n            if (lnPolyCon) {\r\n                lnPolyCon.show();\r\n            }\r\n        }\r\n        else {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(cBodyNds, function (k, nd) {\r\n                nd.hide();\r\n            });\r\n            if (includeTit) {\r\n                connElems.title.hide();\r\n                connElems.icon.hide();\r\n            }\r\n            if (lnCon) {\r\n                lnCon.hide();\r\n            }\r\n            if (lnPolyCon) {\r\n                lnPolyCon.hide();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 显示与隐藏\r\n     * @param {string} type\r\n     */\r\n    ToolBar.prototype.toggle = function (type) {\r\n        this.tToggle(type, true);\r\n        this.cToggle(type, true);\r\n    };\r\n    /**\r\n     * 工具栏显示\r\n     */\r\n    ToolBar.prototype.show = function () {\r\n        this.toggle('S');\r\n        this.cToggle('S');\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.headElems, function (k, elem) {\r\n            elem.show();\r\n        });\r\n    };\r\n    /**\r\n     * 工具栏隐藏\r\n     */\r\n    ToolBar.prototype.hide = function () {\r\n        this.toggle('H');\r\n        this.cToggle('H');\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.headElems, function (k, elem) {\r\n            elem.hide();\r\n        });\r\n    };\r\n    /**\r\n     * 新版工具栏\r\n     * @memberof ToolBar\r\n     */\r\n    ToolBar.prototype.newToolBar = function () {\r\n        var p = this.paper;\r\n        // 工具栏控件\r\n        var tBar = p.set();\r\n        var w = 80, x = 2, y = 2, h = 30;\r\n        var bsAttr = { x: x, y: y, w: w, h: h };\r\n        // 标题\r\n        var tle = p.set();\r\n        tle.push(p.rect(x, y, w, h, 5), p.text(x + 35, y + 18, '工具栏'));\r\n        tle.attr({\r\n            fill: 'beige',\r\n            class: '-we-tool-bar-tle'\r\n        });\r\n        tle[1].attr(\"fill\", \"red\");\r\n        // 容器\r\n        y += h;\r\n        var box = p.rect(x, y, w, h, 2);\r\n        box.attr('fill', 'azure');\r\n        // 可选部件\r\n        var config = this.config;\r\n        var menuSeting = config.menu || false; // 菜单设置性\r\n        if (!menuSeting) { // 默认菜单项\r\n            menuSeting = [\r\n                'begin', 'task', 'sign', 'cond',\r\n                'subFlow', 'parallel', 'merge', 'end',\r\n                'text'\r\n            ];\r\n        }\r\n        // --------------------------------- [节点/begin] -----------------------------\r\n        // 内用填充\r\n        var ist, ndMer = this.ndMer, tBodyNds = this.tBodyNds;\r\n        x += w / 2;\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(menuSeting, function (mk, row) {\r\n            if ('object' != typeof row) {\r\n                mk = row;\r\n                row = {};\r\n            }\r\n            if (!_confNode__WEBPACK_IMPORTED_MODULE_3__[\"cNode\"][mk]) {\r\n                return;\r\n            }\r\n            // console.log(mk)\r\n            y += 32;\r\n            var text = row.text || _confNode__WEBPACK_IMPORTED_MODULE_3__[\"cNode\"][mk].text, cx = x, cy = y;\r\n            // box 高度自适应\r\n            if (parseInt(box.attr(\"height\")) < y) {\r\n                box.attr(\"height\", y);\r\n            }\r\n            // 特殊坐标调整（坐标修正）\r\n            if ('parallel' == mk) {\r\n                cy += 5;\r\n                cx += 20;\r\n            }\r\n            else if ('merge' == mk) {\r\n                cy += 5;\r\n                cx += 20;\r\n            }\r\n            ist = ndMer.make(mk, { cx: cx, cy: cy, w: 40, h: 20, text: text })\r\n                .creator();\r\n            if (ist.label) {\r\n                ist.label.attr('fill', '#FF8C00');\r\n                // ist.label.attr('fill', '#FFA500')\r\n            }\r\n            if (ist.sets) {\r\n                ist.sets.attr('calss', '-we-tb-tle-node');\r\n            }\r\n            else {\r\n                ist.c.attr('class', '-we-tb-tle-node');\r\n            }\r\n            // 特殊节点处理\r\n            if ('text' == mk) {\r\n                ist.c.attr({\r\n                    'font-size': 15,\r\n                    'stroke': 'none'\r\n                });\r\n            }\r\n            tBodyNds[mk] = ist;\r\n        });\r\n        this.tBodyNds = tBodyNds;\r\n        // --------------------------------- [节点/end] -----------------------------\r\n        // 连接线\r\n        // --------------------------------- [连线/begin] -----------------------------\r\n        // y += 23\r\n        var ch = h, th2 = 20;\r\n        var cBodyNds = this.cBodyNds;\r\n        ch = y;\r\n        y += th2;\r\n        var prevH = 60; // 预处理高度\r\n        this.config['lnSeledBkg'] = this.config['lnSeledBkg'] || '#CCFF99';\r\n        this.config['lnDefBkg'] = this.config['lnDefBkg'] || '#ffffff';\r\n        var lnDefBkg = this.config.lnDefBkg;\r\n        this.connElems['lnCon'] = p.rect(bsAttr.x, y, w, prevH / 2)\r\n            .attr('fill', lnDefBkg);\r\n        // .attr(conAttr)\r\n        var ly = y + prevH / 4 * 0.7, lx = x + 20;\r\n        ist = ndMer.make('ln', this._lnConXyCrt(bsAttr.x, y, lx, ly))\r\n            .creator();\r\n        cBodyNds.ln = ist;\r\n        // 折线\r\n        y += 20;\r\n        this.connElems['lnPolyCon'] = p.rect(bsAttr.x, y, w, prevH / 2)\r\n            .attr('fill', lnDefBkg);\r\n        // .attr(conAttr)\r\n        ly = y + prevH / 4 * 0.7,\r\n            lx = x + 20;\r\n        ist = ndMer.make('lnPoly', this._lnPolyConXyCrt(bsAttr.x, y, lx, ly))\r\n            .creator();\r\n        cBodyNds.lnPoly = ist;\r\n        this.cBodyNds = cBodyNds;\r\n        ch = y - ch;\r\n        this.connElems['lnCon'].attr('height', ch / 2);\r\n        this.connElems['lnPolyCon'].attr('height', ch / 2);\r\n        // --------------------------------- [连线/end] -----------------------------\r\n        tBar.push(tle, box);\r\n        // 添加样式\r\n        $('text.-we-tool-bar-tle').css({\r\n            'font-size': '1.13em',\r\n            'position': 'fixed',\r\n            top: 0,\r\n            left: 0\r\n        });\r\n        // $('.-we-tool-bar-tle').css({\r\n        //     'cursor': 'move'\r\n        // })\r\n        // $('.-we-tb-tle-node').css({\r\n        //     'cursor': 'move'\r\n        // })\r\n    };\r\n    return ToolBar;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (ToolBar);\r\n\n\n//# sourceURL=webpack:///./src/ToolBar.ts?");

/***/ }),

/***/ "./src/WePlg.ts":
/*!**********************!*\
  !*** ./src/WePlg.ts ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"./src/util.ts\");\n/**\r\n * WorkerEditor Plugin 插件级别\r\n * 2018年7月10日 星期二\r\n */\r\n\r\nvar WePlg = /** @class */ (function () {\r\n    function WePlg(worker) {\r\n        this.worker = worker;\r\n        this._addPlg();\r\n    }\r\n    WePlg.prototype._addPlg = function () {\r\n        var config = this.worker.config;\r\n        // 用户绑定事件，以及传入绑定事件时\r\n        if (config.bindOEvts || (config.onKeydown && 'function' == typeof config.onKeydown)) {\r\n            config.bindOEvts = true;\r\n            this.operHelpEvts();\r\n        }\r\n    };\r\n    /**\r\n     * 操作助手事件\r\n     */\r\n    WePlg.prototype.operHelpEvts = function () {\r\n        var $this = this.worker, config = $this.config, dom = config.dom;\r\n        // tabindex =\"0\" 是元素可以聚焦，outline 取消边框\r\n        dom.attr('tabindex', '0')\r\n            .css({ 'outline': 'none' });\r\n        dom.off('keydown').on('keydown', function (evt) {\r\n            var code = evt.keyCode;\r\n            // 用户自定义键盘事件\r\n            if (config.onKeydown && 'function' == typeof config.onKeydown) {\r\n                var breakMk = config.onKeydown(code, $this, evt);\r\n                if (breakMk === false) {\r\n                    return;\r\n                }\r\n            }\r\n            // console.log(code)\r\n            // shift +\r\n            if (evt.shiftKey) {\r\n                // 基本操作\r\n                if (68 == code) { // shift + D\t删除当前的选择节点\r\n                    $this.remove();\r\n                }\r\n                else if (84 == code) { // shitf + T tab 循环\r\n                    $this.tab();\r\n                }\r\n                else if (67 == code) { // shift + C tab 循环 conn\r\n                    $this.tab('c');\r\n                }\r\n                else if (76 == code) { // shift + L tab 循环 text/lable\r\n                    $this.tab('t');\r\n                }\r\n                else if (65 == code) { // shift + A 全选择\r\n                    $this.allSelect();\r\n                }\r\n                else if (82 == code) { // shift + R 删除\r\n                    $this.allRemove();\r\n                }\r\n                else if (86 == code) { // shift + v 克隆\r\n                    $this.clone();\r\n                }\r\n                else if (69 == code) { // shift + E 错误检测\r\n                    $this.error();\r\n                }\r\n                // 移动，方向移动：缩放\r\n                else if (_util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].inArray(code, [38, 40, 37, 39, 107, 109]) > -1) {\r\n                    var nodeSelEd = $this.select();\r\n                    if (nodeSelEd) {\r\n                        switch (code) {\r\n                            case 38:\r\n                                nodeSelEd.move2T();\r\n                                break;\r\n                            case 40:\r\n                                nodeSelEd.move2B();\r\n                                break;\r\n                            case 37:\r\n                                nodeSelEd.move2L();\r\n                                break;\r\n                            case 39:\r\n                                nodeSelEd.move2R();\r\n                                break;\r\n                            case 107:\r\n                                nodeSelEd.zoomOut();\r\n                                break;\r\n                            case 109:\r\n                                nodeSelEd.zoomIn();\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (46 == code) { // delete 键删除\r\n                $this.remove();\r\n            }\r\n        });\r\n    };\r\n    return WePlg;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (WePlg);\r\n\n\n//# sourceURL=webpack:///./src/WePlg.ts?");

/***/ }),

/***/ "./src/WeScreen.ts":
/*!*************************!*\
  !*** ./src/WeScreen.ts ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\r\n * WE-Screen 屏幕移动\r\n */\r\nvar WeScreen = /** @class */ (function () {\r\n    function WeScreen() {\r\n    }\r\n    /**\r\n     * 同步移动\r\n     * @param x\r\n     * @param y\r\n     */\r\n    WeScreen.syncMoving = function (x, y) {\r\n        //console.log(window.event);\r\n        var e = window.event;\r\n        var screenX = e.screenX, screenY = e.screenY;\r\n        //console.log([screenX, screenY], [x, y], [e.clientX, e.clientY]);\r\n        console.log(e);\r\n    };\r\n    return WeScreen;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (WeScreen);\r\n\n\n//# sourceURL=webpack:///./src/WeScreen.ts?");

/***/ }),

/***/ "./src/WorkerEditor.ts":
/*!*****************************!*\
  !*** ./src/WorkerEditor.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper */ \"./src/helper.ts\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../version */ \"./version.ts\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"./src/util.ts\");\n/* harmony import */ var _ToolBar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ToolBar */ \"./src/ToolBar.ts\");\n/* harmony import */ var _NodeQue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./NodeQue */ \"./src/NodeQue.ts\");\n/* harmony import */ var _confNode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./confNode */ \"./src/confNode.ts\");\n/* harmony import */ var _node_NodeUtil__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node/NodeUtil */ \"./src/node/NodeUtil.ts\");\n/* harmony import */ var _algo_LnPolyConnFn__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./algo/LnPolyConnFn */ \"./src/algo/LnPolyConnFn.ts\");\n/* harmony import */ var _WePlg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./WePlg */ \"./src/WePlg.ts\");\n///<reference path='../index.d.ts' />\r\n/**\r\n * 2018年3月1日 星期四\r\n * worker 工作流编辑器\r\n */\r\n // 助手方法\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 工作流编辑器轻量级\r\n */\r\nvar WorkerEditor = /** @class */ (function () {\r\n    /**\r\n     * @param {object} config 数据配置项\r\n     */\r\n    function WorkerEditor(config) {\r\n        // 索引处理字典\r\n        this.idxDick = {\r\n            c: 0,\r\n            n: 0,\r\n            t: 0 // 文本\r\n        };\r\n        this.nodeDick = {};\r\n        this.connDick = {};\r\n        this.textDick = {};\r\n        this.tmpNodeMap = {};\r\n        this.tmpMapRElm = {};\r\n        this.config = config; // 系统配置参数\r\n        this.paper = _helper__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createInstance(config); // Raphael 对象        \r\n        this.ndMer = new _NodeQue__WEBPACK_IMPORTED_MODULE_4__[\"NodeQue\"](this.paper);\r\n        this._magnCoreHistory = {};\r\n        // 配置参数处理\r\n        this._configMergeToDefule();\r\n        this._readonly();\r\n        // 内部缓存数组件容器： 节点、连接线、独立文本\r\n        this._cerateToolBar();\r\n        // 数据加载\r\n        if (config.data) {\r\n            try {\r\n                this.load(config.data);\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        this._domListener();\r\n        new _WePlg__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this);\r\n    }\r\n    /**\r\n     * 配置参数与默认参数和合并处理\r\n     */\r\n    WorkerEditor.prototype._configMergeToDefule = function () {\r\n        // pkgClr 背景颜色\r\n        var pkgClr = this.config.pkgClr || {};\r\n        pkgClr.start = pkgClr.start || 'rgb(181, 216, 126)';\r\n        pkgClr.opera = pkgClr.opera || 'rgb(224, 223, 226)';\r\n        pkgClr.judge = pkgClr.judge || 'rgb(49, 174, 196)';\r\n        pkgClr.end = pkgClr.end || 'rgb(34, 185, 41)';\r\n        pkgClr.arrow = pkgClr.arrow || 'rgb(3, 84, 41)';\r\n        pkgClr.NodeBox = pkgClr.NodeBox || 'rgb(15, 13, 105)';\r\n        this.config.pkgClr = pkgClr;\r\n        this.config.prefCode = this.config.prefCode || 'A'; // 内部代码前缀\r\n        this.config.listener = this.config.listener || {}; // 监听事件\r\n        this.config.noToolBar = this.config.noToolBar || false;\r\n    };\r\n    /**\r\n     * 连线同步\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {rSu.Node} node\r\n     * @private\r\n     */\r\n    WorkerEditor.prototype._lineMoveSync = function (x, y, node) {\r\n        var _this = this;\r\n        var conLns = node.conLns, from = conLns.from, to = conLns.to, $this = this;\r\n        // 处理起点\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(from, function (k, v) {\r\n            var fromLn = $this.connDick[v];\r\n            if ('ln' == fromLn.NodeType) {\r\n                var from_code = fromLn.data('from_code'), from_posi = fromLn.data('from_posi'), ps = node.getBBox().ps;\r\n                fromLn.updAttr({ P1: ps[from_posi] });\r\n            }\r\n            else {\r\n                var from_code = fromLn.data('from_code'), from_posi = fromLn.data('from_posi'), ps = node.getBBox().ps;\r\n                fromLn.mvEndPoint(ps[from_posi]);\r\n                // 折线连接线处理\r\n                Object(_algo_LnPolyConnFn__WEBPACK_IMPORTED_MODULE_7__[\"LnPolyConn\"])(fromLn, _this);\r\n            }\r\n        });\r\n        // 处理终点\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(to, function (k, v) {\r\n            var toLn = $this.connDick[v];\r\n            if ('ln' == toLn.NodeType) {\r\n                toLn.updAttr({ P2: { x: x, y: y } });\r\n                var to_code = toLn.data('to_code'), to_posi = toLn.data('to_posi'), ps = node.getBBox().ps;\r\n                toLn.updAttr({ P2: ps[to_posi] });\r\n            }\r\n            else {\r\n                toLn.updAttr({ P2: { x: x, y: y } });\r\n                var to_code = toLn.data('to_code'), to_posi = toLn.data('to_posi'), ps = node.getBBox().ps;\r\n                toLn.mvEndPoint(ps[to_posi], true);\r\n                // 折线连接线处理\r\n                Object(_algo_LnPolyConnFn__WEBPACK_IMPORTED_MODULE_7__[\"LnPolyConn\"])(toLn, _this, node);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * 工具栏处理器\r\n     */\r\n    WorkerEditor.prototype._cerateToolBar = function () {\r\n        var _this = this;\r\n        // 工具栏显示控制\r\n        if (this.config.noToolBar) {\r\n            return null;\r\n        }\r\n        this.toolbarCtrl = new _ToolBar__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.paper, this.config);\r\n        // 事件绑定处理\r\n        var $this = this, _a = $this.toolbarCtrl, tBodyNds = _a.tBodyNds, cBodyNds = _a.cBodyNds, connElems = _a.connElems, bkg = this.config.bkg || {};\r\n        // 节点拖动处理事件\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(tBodyNds, function (key, nd) {\r\n            // 开始和结束不支持拖动\r\n            // if(key == 'begin' || key == 'end'){\r\n            //     return null\r\n            // }\r\n            var ndAst, tP = { x: 0, y: 0 };\r\n            var btarget = nd.sets || nd.c;\r\n            btarget.drag(function (dx, dy) {\r\n                dx += tP.x;\r\n                dy += tP.y;\r\n                if (ndAst) {\r\n                    ndAst.updAttr({ cx: dx, cy: dy });\r\n                }\r\n            }, function () {\r\n                var _a = nd.opt, cx = _a.cx, cy = _a.cy;\r\n                tP.x = cx;\r\n                tP.y = cy;\r\n                cx += 25;\r\n                var ndOpt = { cx: cx, cy: cy, w: 50, h: 40 };\r\n                if (_confNode__WEBPACK_IMPORTED_MODULE_5__[\"cNode\"][key]) {\r\n                    ndOpt.text = _confNode__WEBPACK_IMPORTED_MODULE_5__[\"cNode\"][key].text;\r\n                }\r\n                // 默认颜色，新增节点未运行状态\r\n                ndOpt.bkg = bkg.urunNd || '#CDC5BF';\r\n                ndAst = $this.ndMer\r\n                    .make(key, ndOpt)\r\n                    .creator();\r\n            }, function () {\r\n                ndAst.moveable({\r\n                    beforeMv: function (node) {\r\n                        if ($this.previewMk) {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    afterUpd: function (x, y, node) {\r\n                        $this._lineMoveSync(x, y, node);\r\n                        $this.onNodeResize();\r\n                    }\r\n                });\r\n                $this._nodeBindEvt(ndAst);\r\n                if ('text' == ndAst.NodeType) {\r\n                    var tIdx = $this._order('t', 'T');\r\n                    // 保存到字典中\r\n                    ndAst.data('_code', tIdx);\r\n                    $this.textDick[tIdx] = ndAst;\r\n                }\r\n                else {\r\n                    var _index = $this._order('n', 'A');\r\n                    // 保存到字典中\r\n                    ndAst.data('_code', _index);\r\n                    $this.nodeDick[_index] = ndAst;\r\n                }\r\n            });\r\n        });\r\n        // 连接线 -----------------\r\n        var lnCon = connElems.lnCon, lnPolyCon = connElems.lnPolyCon, _b = $this.toolbarCtrl.config, lnSeledBkg = _b.lnSeledBkg, lnDefBkg = _b.lnDefBkg;\r\n        // 内部属性标记\r\n        lnCon.data('con', 'ln');\r\n        lnPolyCon.data('con', 'lnPoly');\r\n        // 清空连线选择状态\r\n        this.lineCnMode = {\r\n            isSelEd: false,\r\n            type: null\r\n        };\r\n        var clearAllLinkSeled = function () {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(cBodyNds, function (key, nd) {\r\n                nd.isSelEd = false;\r\n            });\r\n            _this.lineCnMode = {\r\n                isSelEd: false,\r\n                type: null\r\n            };\r\n            lnCon.attr('fill', lnDefBkg);\r\n            lnPolyCon.attr('fill', lnDefBkg);\r\n        };\r\n        // 节点内部选择控制事件\r\n        var afterLnCnnClickedEvt = function () {\r\n            // 存在被选中的节点时，重新生成\r\n            var cSeledNode = $this.select();\r\n            if (cSeledNode) {\r\n                cSeledNode.select();\r\n            }\r\n        };\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(cBodyNds, function (key, nd) {\r\n            //console.log(key, nd)\r\n            // 点击事件\r\n            nd.c.click(function () {\r\n                var isSelEd = nd.isSelEd;\r\n                clearAllLinkSeled();\r\n                if (!isSelEd) {\r\n                    nd.isSelEd = true;\r\n                    $this.lineCnMode = {\r\n                        isSelEd: true,\r\n                        type: nd.NodeType\r\n                    };\r\n                    if (nd.NodeType == 'ln') {\r\n                        lnCon.attr('fill', lnSeledBkg);\r\n                    }\r\n                    else {\r\n                        lnPolyCon.attr('fill', lnSeledBkg);\r\n                    }\r\n                    afterLnCnnClickedEvt();\r\n                }\r\n            });\r\n        });\r\n        // 基于 WorkerEditor 属性\r\n        var lnConClickEvt = function () {\r\n            // 选中\r\n            if (!$this.lineCnMode.isSelEd ||\r\n                ($this.lineCnMode.isSelEd && this.data('con') != $this.lineCnMode.type)) {\r\n                clearAllLinkSeled();\r\n                this.attr('fill', lnSeledBkg);\r\n                $this.lineCnMode = {\r\n                    isSelEd: true,\r\n                    type: this.data('con')\r\n                };\r\n                afterLnCnnClickedEvt();\r\n            }\r\n            else {\r\n                clearAllLinkSeled();\r\n            }\r\n        };\r\n        lnCon.click(lnConClickEvt);\r\n        lnPolyCon.click(lnConClickEvt);\r\n    };\r\n    /**\r\n     * 节点事件绑定\r\n     * @param {rSu.Node} node 输入为空时绑定所有值\r\n     */\r\n    WorkerEditor.prototype._nodeBindEvt = function (node) {\r\n        this._baseNodeBindEvt(node);\r\n        var $this = this, _a = this, ndMer = _a.ndMer, config = _a.config, bkg = config.bkg || {};\r\n        // 事件绑定处理\r\n        var toBindNodeEvts = function (nd) {\r\n            // 点击\r\n            nd.c.click(function () {\r\n                $this.removeAllSeled();\r\n                nd.select();\r\n                $this.onClick(nd);\r\n            });\r\n            // 双击\r\n            nd.c.dblclick(function () {\r\n                $this.onDbClick(nd);\r\n            });\r\n            //nd\r\n            // 端点处理\r\n            nd.onCreateBoxPnt = function (pnt) {\r\n                // 预览标识\r\n                if ($this.previewMk || $this.config.disDragble) {\r\n                    return null;\r\n                }\r\n                var tmpLnIst;\r\n                // 开启连线模式时\r\n                if ($this.lineCnMode && $this.lineCnMode.isSelEd) {\r\n                    // 配置，禁止节点之间连线\r\n                    if (config.disConnNode) {\r\n                        return null;\r\n                    }\r\n                    var tmpP_1 = { x: 0, y: 0 };\r\n                    pnt.drag(function (dx, dy) {\r\n                        if (!tmpLnIst) {\r\n                            console.log('选择框连线拖动出错！');\r\n                            return;\r\n                        }\r\n                        dx += tmpP_1.x;\r\n                        dy += tmpP_1.y;\r\n                        var collNode = $this.collisionByP(dx, dy);\r\n                        $this.allBackground();\r\n                        if (collNode) {\r\n                            var rElem = collNode.magnCore(dx, dy);\r\n                            if (rElem) {\r\n                                $this._magnCoreHistory[rElem.id] = rElem; // 历史值\r\n                                dx = rElem.attr('cx');\r\n                                dy = rElem.attr('cy');\r\n                                tmpLnIst.data('to_code', rElem.data('pcode'))\r\n                                    .data('to_posi', rElem.data('posi'));\r\n                            }\r\n                            collNode.background('magn');\r\n                        }\r\n                        else {\r\n                            tmpLnIst.data('to_code', null)\r\n                                .data('to_posi', null);\r\n                            $this._clearMagnCoreHistory();\r\n                        }\r\n                        if ($this.lineCnMode.type == 'ln') {\r\n                            tmpLnIst.updAttr({\r\n                                P2: { x: dx, y: dy }\r\n                            });\r\n                        }\r\n                        else {\r\n                            tmpLnIst.opt.MPs = []; // 删除中间代码\r\n                            // (<any>tmpLnIst).getMiddP()\r\n                            tmpLnIst.updAttr({\r\n                                P2: { x: dx, y: dy }\r\n                            });\r\n                            // 折线连接线处理\r\n                            Object(_algo_LnPolyConnFn__WEBPACK_IMPORTED_MODULE_7__[\"LnPolyConn\"])(tmpLnIst, $this, collNode);\r\n                        }\r\n                    }, function () {\r\n                        // 历史节点处理                            \r\n                        $this.removeTmpNode('connLnIst');\r\n                        // 删除所有联系那选中状态\r\n                        $this.removeAllSeled('conn');\r\n                        // 处理\r\n                        tmpP_1.x = this.attr('cx');\r\n                        tmpP_1.y = this.attr('cy');\r\n                        var newOpt = {}, lx = tmpP_1.x, ly = tmpP_1.y;\r\n                        if ($this.lineCnMode.type == 'ln') {\r\n                            newOpt = {\r\n                                P1: { x: lx, y: ly },\r\n                                P2: { x: lx + 10, y: ly + 5 }\r\n                            };\r\n                        }\r\n                        else {\r\n                            newOpt = {\r\n                                P1: { x: lx, y: ly },\r\n                                P2: { x: lx + 4, y: ly + 4 },\r\n                                //h: 4\r\n                                r: 5\r\n                            };\r\n                        }\r\n                        // 默认颜色，新增节点未运行状态\r\n                        newOpt.bkg = bkg.urunNd || '#CDC5BF';\r\n                        tmpLnIst = ndMer.make($this.lineCnMode.type, newOpt)\r\n                            .creator()\r\n                            .data('from_code', pnt.data('pcode'))\r\n                            .data('from_posi', pnt.data('posi'));\r\n                        $this.tmpNodeMap['connLnIst'] = tmpLnIst;\r\n                    }, function () {\r\n                        // 有效的连线保留，说明其连接成功\r\n                        if (tmpLnIst.data('to_code') && tmpLnIst.data('to_posi')) {\r\n                            var cIdx = $this._order('c', 'C'), fCode = tmpLnIst.data('from_code'), tCode = tmpLnIst.data('to_code');\r\n                            tmpLnIst.data('_code', cIdx);\r\n                            var fNd = $this.nodeDick[fCode];\r\n                            var tNd = $this.nodeDick[tCode];\r\n                            fNd.line(cIdx);\r\n                            fNd.clearTmpElem('mc');\r\n                            tNd.line(cIdx, true);\r\n                            tNd.clearTmpElem('mc');\r\n                            $this.allBackground();\r\n                            // 记录到字典中\r\n                            $this._lineBindEvt(tmpLnIst);\r\n                            $this.connDick[cIdx] = tmpLnIst;\r\n                            $this.tmpNodeMap['connLnIst'] = null;\r\n                        }\r\n                        $this.removeTmpNode('connLnIst');\r\n                        // \r\n                        // $this.tmpNodeMap['connLnIst'] = tmpLnIst\r\n                    });\r\n                }\r\n                // 节点方位拖动大小\r\n                else if (!config.disEpDragble) {\r\n                    var tp_1 = { x: 0, y: 0 }, attr_1 = { pcode: null, posi: null };\r\n                    pnt.drag(function (dx, dy) {\r\n                        dx += tp_1.x, dy += tp_1.y;\r\n                        var cnode = attr_1.pcode ? $this.nodeDick[attr_1.pcode] : null;\r\n                        if (cnode && attr_1.pcode && attr_1.posi) {\r\n                            var opt = cnode.opt, cx = opt.cx, cy = opt.cy, h = opt.h, w = opt.w, boxPadding = cnode.feature('boxPadding');\r\n                            // 数据申明\r\n                            var yt = void 0, yb = void 0, xl = void 0, xr = void 0;\r\n                            // 新值\r\n                            var yt1 = void 0, yb1 = void 0, xl1 = void 0, xr1 = void 0;\r\n                            var cx1 = void 0, cy1 = void 0, h1 = void 0, w1 = void 0;\r\n                            switch (attr_1.posi) {\r\n                                case 'a': // 左上角移动\r\n                                    yt1 = dy + boxPadding;\r\n                                    xl1 = dx + boxPadding;\r\n                                    yb = cy + h / 2;\r\n                                    xr = cx + w / 2;\r\n                                    if (yt1 <= yb && xl1 <= xr) {\r\n                                        h1 = Math.abs(yt1 - yb);\r\n                                        w1 = Math.abs(xl1 - xr);\r\n                                        cx1 = xl1 + w1 / 2;\r\n                                        cy1 = yt1 + h1 / 2;\r\n                                        cnode.updAttr({\r\n                                            h: h1,\r\n                                            w: w1,\r\n                                            cx: cx1,\r\n                                            cy: cy1\r\n                                        });\r\n                                    }\r\n                                    break;\r\n                                case 'b': // 上拉 \r\n                                    yt1 = dy + boxPadding;\r\n                                    yb = cy + h / 2;\r\n                                    if (yt1 <= yb) {\r\n                                        h1 = Math.abs(yb - yt1);\r\n                                        cy1 = yt1 + h1 / 2;\r\n                                        cnode.updAttr({\r\n                                            h: h1,\r\n                                            cy: cy1\r\n                                        });\r\n                                        // 同步更新边框，报错 [BUG]\r\n                                        // cnode.select()\r\n                                    }\r\n                                    break;\r\n                                case 'c': // 右上角\r\n                                    yt1 = dy + boxPadding;\r\n                                    xr1 = dx - boxPadding;\r\n                                    yb = cy + h / 2;\r\n                                    xl = cx - w / 2;\r\n                                    if (yt1 <= yb && xr1 >= xl) {\r\n                                        h1 = Math.abs(yt1 - yb);\r\n                                        w1 = Math.abs(xr1 - xl);\r\n                                        cx1 = xr1 - w1 / 2;\r\n                                        cy1 = yt1 + h1 / 2;\r\n                                        cnode.updAttr({\r\n                                            h: h1,\r\n                                            w: w1,\r\n                                            cx: cx1,\r\n                                            cy: cy1\r\n                                        });\r\n                                    }\r\n                                    break;\r\n                                case 'd': // 右拉\r\n                                    xr1 = dx - boxPadding;\r\n                                    xl = cx - w / 2;\r\n                                    if (xr1 >= xl) {\r\n                                        w1 = Math.abs(xl - xr1),\r\n                                            cx1 = xr1 - w1 / 2;\r\n                                        cnode.updAttr({\r\n                                            w: w1,\r\n                                            cx: cx1\r\n                                        });\r\n                                        // 同步更新边框，报错 [BUG]\r\n                                        // cnode.select()\r\n                                    }\r\n                                    break;\r\n                                case 'e': // 右下角\r\n                                    yb1 = dy - boxPadding;\r\n                                    xr1 = dx - boxPadding;\r\n                                    yt = cy - h / 2;\r\n                                    xl = cx - w / 2;\r\n                                    if (yb1 >= yt && xr1 >= xl) {\r\n                                        h1 = Math.abs(yb1 - yt);\r\n                                        w1 = Math.abs(xr1 - xl);\r\n                                        cx1 = xr1 - w1 / 2;\r\n                                        cy1 = yb1 - h1 / 2;\r\n                                        cnode.updAttr({\r\n                                            h: h1,\r\n                                            w: w1,\r\n                                            cx: cx1,\r\n                                            cy: cy1\r\n                                        });\r\n                                    }\r\n                                    break;\r\n                                case 'f': // 下拉\r\n                                    yb1 = dy - boxPadding,\r\n                                        yt = cy - h / 2;\r\n                                    if (yb1 >= yt) {\r\n                                        h1 = Math.abs(yt - yb1),\r\n                                            cy1 = yb1 - h1 / 2;\r\n                                        cnode.updAttr({\r\n                                            h: h1,\r\n                                            cy: cy1\r\n                                        });\r\n                                        // 同步更新边框，报错 [BUG]\r\n                                        // cnode.select()\r\n                                    }\r\n                                    break;\r\n                                case 'g': // 左下角\r\n                                    yb1 = dy - boxPadding;\r\n                                    xl1 = dx + boxPadding;\r\n                                    yt = cy - h / 2;\r\n                                    xr = cx + w / 2;\r\n                                    if (yb1 >= yt && xl1 <= xr) {\r\n                                        h1 = Math.abs(yb1 - yt);\r\n                                        w1 = Math.abs(xl1 - xr);\r\n                                        cx1 = xl1 + w1 / 2;\r\n                                        cy1 = yb1 - h1 / 2;\r\n                                        cnode.updAttr({\r\n                                            h: h1,\r\n                                            w: w1,\r\n                                            cx: cx1,\r\n                                            cy: cy1\r\n                                        });\r\n                                    }\r\n                                    break;\r\n                                case 'h': // 左拉\r\n                                    xl1 = dx + boxPadding,\r\n                                        xr = cx + w / 2;\r\n                                    if (xl1 <= xr) {\r\n                                        w1 = Math.abs(xr - xl1);\r\n                                        cx1 = xl1 + w1 / 2;\r\n                                        cnode.updAttr({\r\n                                            w: w1,\r\n                                            cx: cx1\r\n                                        });\r\n                                        // 同步更新边框，报错 [BUG]\r\n                                        // cnode.select()\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }, function () {\r\n                        // 处理\r\n                        tp_1.x = this.attr('cx');\r\n                        tp_1.y = this.attr('cy');\r\n                        //console.log(this.data())\r\n                        attr_1.pcode = this.data('pcode');\r\n                        attr_1.posi = this.data('posi');\r\n                    }, function () { });\r\n                }\r\n            };\r\n            // 尺寸自适应\r\n            nd.onSize = function () {\r\n                var opt = this.opt;\r\n                $this._lineMoveSync(opt.cx, opt.cy, this);\r\n            };\r\n        };\r\n        if (node) {\r\n            toBindNodeEvts(node);\r\n        }\r\n        else {\r\n            for (var key in this.nodeDick) {\r\n                toBindNodeEvts(this.nodeDick[key]);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 连接线事件绑定\r\n     * @param {rSu.Node} ln\r\n     * @private\r\n     */\r\n    WorkerEditor.prototype._lineBindEvt = function (ln) {\r\n        this._baseNodeBindEvt(ln);\r\n        var $this = this;\r\n        if (ln) {\r\n            var bkg_1 = this.config.bkg || {};\r\n            // 起点移动处理\r\n            var startPFn_1 = function (elem) {\r\n                var p1 = { x: 0, y: 0 };\r\n                elem.drag(function (dx, dy) {\r\n                    dx += p1.x;\r\n                    dy += p1.y;\r\n                    // 节点碰撞\r\n                    var collNode = $this.collisionByP(dx, dy), fCode = ln.data('from_code'), lnCode = ln.code;\r\n                    if (fCode) {\r\n                        $this.nodeDick[fCode].rmLine(lnCode);\r\n                    }\r\n                    $this.allBackground();\r\n                    if (collNode) {\r\n                        var rElem = collNode.magnCore(dx, dy);\r\n                        if (rElem) {\r\n                            dx = rElem.attr('cx');\r\n                            dy = rElem.attr('cy');\r\n                            ln.data('from_code', rElem.data('pcode'))\r\n                                .data('from_posi', rElem.data('posi'));\r\n                        }\r\n                        collNode.background('magn');\r\n                        collNode.line(lnCode);\r\n                    }\r\n                    else {\r\n                        ln.data('from_code', null)\r\n                            .data('from_posi', null);\r\n                    }\r\n                    ln.updAttr({ P1: { x: dx, y: dy } });\r\n                }, function () {\r\n                    p1.x = this.attr('cx');\r\n                    p1.y = this.attr('cy');\r\n                }, function () { });\r\n            };\r\n            // 终点移动处理\r\n            var endPFn_1 = function (elem) {\r\n                var p1 = { x: 0, y: 0 };\r\n                elem.drag(function (dx, dy) {\r\n                    dx += p1.x;\r\n                    dy += p1.y;\r\n                    // 节点碰撞\r\n                    var collNode = $this.collisionByP(dx, dy), fCode = ln.data('to_code'), lnCode = ln.code;\r\n                    if (fCode) {\r\n                        $this.nodeDick[fCode].rmLine(lnCode, true);\r\n                    }\r\n                    $this.allBackground();\r\n                    if (collNode) {\r\n                        var rElem = collNode.magnCore(dx, dy);\r\n                        if (rElem) {\r\n                            dx = rElem.attr('cx');\r\n                            dy = rElem.attr('cy');\r\n                            ln.data('to_code', rElem.data('pcode'))\r\n                                .data('to_posi', rElem.data('posi'));\r\n                        }\r\n                        collNode.background('magn');\r\n                        collNode.line(lnCode, true);\r\n                    }\r\n                    else {\r\n                        ln.data('to_code', null)\r\n                            .data('to_posi', null);\r\n                    }\r\n                    ln.updAttr({ P2: { x: dx, y: dy } });\r\n                    // 折线\r\n                    if ('ln_poly' == ln.NodeType) {\r\n                        Object(_algo_LnPolyConnFn__WEBPACK_IMPORTED_MODULE_7__[\"LnPolyConn\"])(ln, $this, collNode);\r\n                    }\r\n                }, function () {\r\n                    p1.x = this.attr('cx');\r\n                    p1.y = this.attr('cy');\r\n                }, function () { });\r\n            };\r\n            if ('ln' == ln.NodeType) {\r\n                ln.onCreateBoxPnt = function (pElem) {\r\n                    // 预览标识，禁止拖动\r\n                    if ($this.previewMk || $this.config.disDragble) {\r\n                        return null;\r\n                    }\r\n                    var pcode = pElem.data('pcode'), posi = pElem.data('posi');\r\n                    // 起点\r\n                    if ('f' == posi) {\r\n                        startPFn_1(pElem);\r\n                    }\r\n                    else if ('t' == posi) {\r\n                        endPFn_1(pElem);\r\n                    }\r\n                };\r\n                // 连线选中\r\n                ln.c.click(function () {\r\n                    $this.removeAllSeled();\r\n                    ln.select();\r\n                });\r\n            }\r\n            else {\r\n                // 连线选中\r\n                ln.c.click(function () {\r\n                    $this.removeAllSeled();\r\n                    ln.select();\r\n                });\r\n                // 边框点\r\n                ln.onCreateBoxPnt = function (pElem) {\r\n                    // 预览标识\r\n                    if ($this.previewMk || $this.config.disDragble) {\r\n                        return null;\r\n                    }\r\n                    var pcode = pElem.data('pcode'), posi = pElem.data('posi'), MPs = ln.opt.MPs, fMIdx = (2 + MPs.length) * 2 - 2, // 聚焦点最大索引\r\n                    fMIdxStr = 'f' + fMIdx;\r\n                    if ('f0' == posi) { // 起点\r\n                        startPFn_1(pElem);\r\n                    }\r\n                    else if (fMIdxStr == posi) { // 终点\r\n                        endPFn_1(pElem);\r\n                    }\r\n                    else { // 中间点\r\n                        var tP_1 = { x: 0, y: 0 }, MPsTmp = [], MPsLn_1, // 中间点串联成的临时连线\r\n                        fPQue_1 = {}, tElemKey_1 = 'ln_ploy_point', idx0_1 = -1, idx1_1 = -1;\r\n                        pElem.drag(function (dx, dy) {\r\n                            dx += tP_1.x;\r\n                            dy += tP_1.y;\r\n                            var MPsLnAttr = _node_NodeUtil__WEBPACK_IMPORTED_MODULE_6__[\"default\"].path2ps(MPsLn_1), len = MPsLnAttr.length, fp = MPsLnAttr[0], tp = MPsLnAttr[len - 1];\r\n                            var pAttr = [fp];\r\n                            // 同 x/y 轴坐标\r\n                            if (fp.x == tp.x || fp.y == tp.y) {\r\n                                // 同 x 轴，向 y 方向移动\r\n                                if (fp.x == tp.x) {\r\n                                    pAttr.push({ x: dx, y: fp.y }, { x: dx, y: tp.y });\r\n                                }\r\n                                else {\r\n                                    pAttr.push({ x: fp.x, y: dy }, { x: tp.x, y: dy });\r\n                                }\r\n                            }\r\n                            else {\r\n                                pAttr.push({ x: dx, y: fp.y }, { x: dx, y: dy }, { x: tp.x, y: dy });\r\n                            }\r\n                            pAttr.push(tp);\r\n                            //    console.log(pAttr)\r\n                            MPsLn_1.attr('path', _node_NodeUtil__WEBPACK_IMPORTED_MODULE_6__[\"default\"].ps2Path(pAttr));\r\n                        }, function () {\r\n                            tP_1.x = this.attr('cx');\r\n                            tP_1.y = this.attr('cy');\r\n                            fPQue_1 = ln.getFocusPoint();\r\n                            var idx = parseInt(posi.replace('f', ''));\r\n                            idx0_1 = idx - 1;\r\n                            idx1_1 = idx + 1;\r\n                            var key0 = 'f' + idx0_1, key1 = 'f' + idx1_1;\r\n                            var fp = fPQue_1[key0], mp = fPQue_1[posi], tp = fPQue_1[key1];\r\n                            if ('f0' == key0) {\r\n                                fp = _node_NodeUtil__WEBPACK_IMPORTED_MODULE_6__[\"default\"].middP(fp, mp);\r\n                            }\r\n                            if (fMIdxStr == key1) {\r\n                                tp = _node_NodeUtil__WEBPACK_IMPORTED_MODULE_6__[\"default\"].middP(mp, tp);\r\n                            }\r\n                            MPsLn_1 = this.paper.path(_node_NodeUtil__WEBPACK_IMPORTED_MODULE_6__[\"default\"].ps2Path([\r\n                                fp,\r\n                                mp,\r\n                                tp\r\n                            ]))\r\n                                .attr('stroke', '#00FF00');\r\n                            $this.rmTempElem(tElemKey_1);\r\n                            $this.tmpMapRElm[tElemKey_1] = MPsLn_1;\r\n                        }, function () {\r\n                            var MPsLnAttr = _node_NodeUtil__WEBPACK_IMPORTED_MODULE_6__[\"default\"].path2ps(MPsLn_1);\r\n                            var pQue = [], isMkMPs = false; // 中间值产生成功\r\n                            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(fPQue_1, function (k, p) {\r\n                                var kIdx = parseInt(k.replace('f', ''));\r\n                                if (kIdx >= idx0_1 && kIdx <= idx1_1) {\r\n                                    if (!isMkMPs) {\r\n                                        pQue = pQue.concat(pQue, MPsLnAttr);\r\n                                        isMkMPs = true;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pQue.push(p);\r\n                                }\r\n                            });\r\n                            var nPMs = _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].subArray(pQue, 1, -1);\r\n                            ln.updAttr({\r\n                                MPs: nPMs\r\n                            });\r\n                            ln.select();\r\n                            $this.rmTempElem(tElemKey_1);\r\n                        });\r\n                    }\r\n                };\r\n            }\r\n            // 公共鼠标选中事件\r\n            ln.c.hover(function () {\r\n                var _bkg = bkg_1.lnHover || '#FF0000', sWd = '4px';\r\n                this.attr('stroke-width', sWd)\r\n                    .attr('stroke', _bkg);\r\n                // 箭体\r\n                if (ln.inlineEle) {\r\n                    ln.inlineEle\r\n                        .attr('fill', _bkg)\r\n                        .attr('stroke', _bkg)\r\n                        .attr('stroke-width', sWd);\r\n                }\r\n            }, function () {\r\n                var _bkg = ln.opt.bkg, sWd = '2px';\r\n                this.attr('stroke-width', '2px')\r\n                    .attr('stroke', ln.opt.bkg);\r\n                // 箭体\r\n                if (ln.inlineEle) {\r\n                    ln.inlineEle.attr('fill', ln.opt.bkg);\r\n                    ln.inlineEle.attr('stroke', ln.opt.bkg);\r\n                }\r\n            });\r\n            // console.log(ln)\r\n        }\r\n    };\r\n    /**\r\n     * 基本节点时间绑定，用于外部处理以及所有节点需要的时间\r\n     * @param {rSu.Node} nd\r\n     * @private\r\n     */\r\n    WorkerEditor.prototype._baseNodeBindEvt = function (nd) {\r\n        this._nodeToolTip(nd);\r\n    };\r\n    /**\r\n     * 序列号获取\r\n     * @param {string} type 类型 [c, n, t]\r\n     * @param {string} prev\r\n     * @param {string} ref\r\n     * @returns {string | number}\r\n     * @private\r\n     */\r\n    WorkerEditor.prototype._order = function (type, prev, ref) {\r\n        var newStr;\r\n        prev = prev ? prev : '';\r\n        if (type) {\r\n            if ('undefined' != typeof this.idxDick[type]) {\r\n                this.idxDick[type] += 1;\r\n                newStr = ref ? ref : prev + this.idxDick[type];\r\n                switch (type) {\r\n                    case 'c':\r\n                        if (this.connDick[newStr]) {\r\n                            newStr = this._order(type, prev);\r\n                        }\r\n                        break;\r\n                    case 'n':\r\n                        if (this.nodeDick[newStr]) {\r\n                            newStr = this._order(type, prev);\r\n                        }\r\n                        break;\r\n                    case 't':\r\n                        if (this.textDick[newStr]) {\r\n                            newStr = this._order(type, prev);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return newStr;\r\n    };\r\n    /**\r\n     * dom 监听\r\n     */\r\n    WorkerEditor.prototype._domListener = function () {\r\n        var dom = this.config.dom, $this = this;\r\n        // 双击\r\n        dom.find('svg').dblclick(function () {\r\n            $this.removeAllSeled();\r\n        });\r\n    };\r\n    /**\r\n     * 节点title提示绑定，包括 node/text/conn\r\n     * @param {rSu.Node} node\r\n     */\r\n    WorkerEditor.prototype._nodeToolTip = function (node) {\r\n        if (!this.config.closeToolTip && node) {\r\n            var $this_1 = this;\r\n            node.c.hover(function () {\r\n                var textTip = node.textTip;\r\n                if (textTip) {\r\n                    var offset = $this_1.getDomOffset();\r\n                    $this_1.tooltip(textTip, this.attr('x') + offset.left + 20, this.attr('y') + offset.top + 2);\r\n                }\r\n            }, function () {\r\n                $this_1.tooltip('');\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * 只读属性\r\n     */\r\n    WorkerEditor.prototype._readonly = function () {\r\n        if (this.config.readonly) {\r\n            this.config.noToolBar = true;\r\n            this.config.disEpDragble = true;\r\n            this.config.disConnNode = true;\r\n            this.config.disDragble = true;\r\n        }\r\n    };\r\n    /**\r\n     * 删除磁化描点\r\n     * @private\r\n     */\r\n    WorkerEditor.prototype._clearMagnCoreHistory = function () {\r\n        var _this = this;\r\n        // 磁化历史点\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this._magnCoreHistory, function (str, el) {\r\n            el.remove();\r\n            delete _this._magnCoreHistory[str];\r\n        });\r\n    };\r\n    /**\r\n     * 移除所有选中中元素\r\n     */\r\n    WorkerEditor.prototype.removeAllSeled = function (type) {\r\n        var _this = this;\r\n        // 删除所有节点\r\n        var removeAllSeledNodeFn = function (dick) {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(dick, function (cd, ist) {\r\n                if (ist.isSelEd) {\r\n                    ist.removeBox();\r\n                }\r\n            });\r\n        };\r\n        type = type ? ('object' == typeof type ? type : [type]) : '';\r\n        if (!type) {\r\n            type = ['c', 't', 'n'];\r\n        }\r\n        //console.log(type)\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(type, function (idx, tp) {\r\n            var dick = {};\r\n            if ('c' == tp || 'conn' == tp) {\r\n                dick = _this.connDick;\r\n            }\r\n            else if ('t' == tp || 'text' == tp) {\r\n                dick = _this.textDick;\r\n            }\r\n            else {\r\n                dick = _this.nodeDick;\r\n            }\r\n            removeAllSeledNodeFn(dick);\r\n        });\r\n        this.rmTempElem('allBorde');\r\n        // 磁化历史点\r\n        this._clearMagnCoreHistory();\r\n    };\r\n    /**\r\n     * 全选\r\n     */\r\n    WorkerEditor.prototype.allSelect = function () {\r\n        // 标记选中状态\r\n        this.allNdSeled();\r\n        // 预览模式\r\n        if (this.previewMk) {\r\n            return;\r\n        }\r\n        var _a = this.getAllSelPs(), x = _a.x, y = _a.y, w = _a.w, h = _a.h;\r\n        var $this = this;\r\n        // 生成全选遮挡层\r\n        this.rmTempElem('allBorde');\r\n        var tP = { x: 0, y: 0 }, pS = {};\r\n        var allBorde = this.paper.rect(x, y, w, h)\r\n            .attr('fill-opacity', 0.75)\r\n            .attr('fill', '#9999FF')\r\n            .dblclick(function () {\r\n            $this.removeAllSeled();\r\n        })\r\n            .drag(function (dx, dy) {\r\n            // 自身移动\r\n            this.attr('x', tP.x + dx);\r\n            this.attr('y', tP.y + dy);\r\n            // 全部节点迁移\r\n            // 等比例移动法\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each($this.nodeDick, function (k, node) {\r\n                var nTp = pS[k];\r\n                node.updAttr({\r\n                    cx: nTp.x + dx,\r\n                    cy: nTp.y + dy\r\n                });\r\n                node.select();\r\n            });\r\n            $this.allNdSeled('conn');\r\n        }, function () {\r\n            tP.x = this.attr('x');\r\n            tP.y = this.attr('y');\r\n            // 节点中心点坐标\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each($this.nodeDick, function (k, node) {\r\n                var opt = node.opt;\r\n                pS[k] = {\r\n                    x: opt.cx,\r\n                    y: opt.cy\r\n                };\r\n            });\r\n        }, function () { });\r\n        this.tmpMapRElm['allBorde'] = allBorde;\r\n    };\r\n    /**\r\n     * 全选是相关端点\r\n     */\r\n    WorkerEditor.prototype.getAllSelPs = function () {\r\n        // 获取所有节点边框\r\n        var t = 0, b = 0, l = 0, r = 0;\r\n        var boxPadding;\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (k, node) {\r\n            var c = node.c, attr = node.getBBox().attr, x = attr.x, y = attr.y, width = attr.width, height = attr.height, t1 = y, b1 = y + height, l1 = x, r1 = x + width;\r\n            if (!boxPadding)\r\n                boxPadding = node.feature('boxPadding', null, 3);\r\n            if (t == 0)\r\n                t = t1;\r\n            if (b == 0)\r\n                b = b1;\r\n            if (l == 0)\r\n                l = l1;\r\n            if (r == 0)\r\n                r = r1;\r\n            // 上边框\r\n            if (t > t1)\r\n                t = t1;\r\n            // 下边框\r\n            if (b < b1)\r\n                b = b1;\r\n            // 左边框\r\n            if (l > l1)\r\n                l = l1;\r\n            // 右边框\r\n            if (r < r1)\r\n                r = r1;\r\n        });\r\n        var x1 = l, y1 = t, w1 = Math.abs(l - r), h1 = Math.abs(t - b);\r\n        boxPadding = boxPadding * 2;\r\n        var boxPadding2 = boxPadding * 2;\r\n        return {\r\n            x: x1 - boxPadding,\r\n            y: y1 - boxPadding,\r\n            w: w1 + boxPadding2,\r\n            h: h1 + boxPadding2\r\n        };\r\n    };\r\n    /**\r\n     * 选中所有节点\r\n     * @param type\r\n     */\r\n    WorkerEditor.prototype.allNdSeled = function (type) {\r\n        var _this = this;\r\n        if (type) {\r\n            type = 'object' == typeof type ? type : [type];\r\n        }\r\n        else {\r\n            type = ['c', 't', 'n'];\r\n        }\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(type, function (idx, tp) {\r\n            var dick = {};\r\n            if ('c' == tp || 'conn' == tp) {\r\n                dick = _this.connDick;\r\n            }\r\n            else if ('t' == tp || 'text' == tp) {\r\n                dick = _this.textDick;\r\n            }\r\n            else {\r\n                dick = _this.nodeDick;\r\n            }\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(dick, function (k, node) {\r\n                node.select();\r\n            });\r\n        });\r\n    };\r\n    // 删除所有节点\r\n    WorkerEditor.prototype.rmAllNode = function () {\r\n        var _this = this;\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (k, node) {\r\n            _this.remove(node);\r\n        });\r\n    };\r\n    // 删除所有连线\r\n    WorkerEditor.prototype.rmAllLine = function () {\r\n        var _this = this;\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.connDick, function (k, node) {\r\n            _this.remove(node);\r\n        });\r\n    };\r\n    // 删除所有文本\r\n    WorkerEditor.prototype.rmAllText = function () {\r\n        var _this = this;\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.textDick, function (k, node) {\r\n            _this.remove(node);\r\n        });\r\n    };\r\n    // 移除所有节点\r\n    WorkerEditor.prototype.allRemove = function () {\r\n        this.rmAllLine();\r\n        this.rmAllNode();\r\n        this.rmAllText();\r\n    };\r\n    /**\r\n     * 设置统一变化管理\r\n     */\r\n    WorkerEditor.prototype.allBackground = function (type) {\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (i, v) {\r\n            v.background(type);\r\n        });\r\n    };\r\n    /**\r\n     * 移除临时元素字典（支持模糊查询）\r\n     * @param key\r\n     * @param isLike 模糊查询\r\n     */\r\n    WorkerEditor.prototype.rmTempElem = function (key, isLike) {\r\n        var _this = this;\r\n        if (key && !isLike) {\r\n            if (this.tmpMapRElm[key]) {\r\n                this.tmpMapRElm[key].remove();\r\n            }\r\n        }\r\n        else {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.tmpMapRElm, function (k, elem) {\r\n                if (isLike && key) {\r\n                    if (k.indexOf(key) > -1) {\r\n                        _this.rmTempElem(k);\r\n                    }\r\n                }\r\n                else {\r\n                    _this.rmTempElem(k);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * 获取最新的节点\r\n     */\r\n    WorkerEditor.prototype.last = function () {\r\n        var lastNode = null;\r\n        for (var key in this.nodeDick) {\r\n            lastNode = this.nodeDick[key];\r\n        }\r\n        return lastNode;\r\n    };\r\n    /**\r\n     * 删除节点\r\n     * @param {string | rSu.Node} code\r\n     * @returns {boolean}\r\n     */\r\n    WorkerEditor.prototype.remove = function (code) {\r\n        var _this = this;\r\n        var isSuccess = false;\r\n        var removeNode;\r\n        // 删除节点\r\n        removeNode = function (node) {\r\n            if (node) {\r\n                var NodeType = node.NodeType, value = node.code;\r\n                if ('ln' == NodeType || 'ln_poly' == NodeType) { // 连线删除\r\n                    var fCode = node.data('from_code'), tCode = node.data('to_code');\r\n                    var fNodeIst = _this.nodeDick[fCode], tNodeIst = _this.nodeDick[tCode];\r\n                    // 先删除节点后删除连线，连线不存在\r\n                    if (fNodeIst) {\r\n                        fNodeIst.rmLine(value);\r\n                    }\r\n                    if (tNodeIst) {\r\n                        tNodeIst.rmLine(value, true);\r\n                    }\r\n                }\r\n                // 节点删除，并删除与之相连连接线\r\n                if ('node' == _this.getNdType(node)) {\r\n                    var conLns = node.conLns;\r\n                    _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(conLns.from, function (i, cd) {\r\n                        removeNode(_this.connDick[cd]);\r\n                    });\r\n                    _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(conLns.to, function (i, cd) {\r\n                        removeNode(_this.connDick[cd]);\r\n                    });\r\n                }\r\n                node.delete();\r\n                if (_this.nodeDick[value]) {\r\n                    delete _this.nodeDick[value];\r\n                }\r\n                else if (_this.connDick[value]) {\r\n                    delete _this.connDick[value];\r\n                }\r\n                else if (_this.textDick[value]) {\r\n                    delete _this.textDick[value];\r\n                }\r\n                isSuccess = true;\r\n                // 选择切换\r\n                var lastElem = _this.last();\r\n                if (lastElem) {\r\n                    lastElem.select();\r\n                }\r\n            }\r\n        };\r\n        if (!code) {\r\n            var _a = this.selectGroup(), node = _a.node, text = _a.text, conn = _a.conn;\r\n            var eachNodeFn = function (rs) {\r\n                _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(rs, function (i, nd) {\r\n                    removeNode(nd);\r\n                });\r\n            };\r\n            eachNodeFn(node);\r\n            eachNodeFn(text);\r\n            eachNodeFn(conn);\r\n        }\r\n        else if ('object' == typeof code) {\r\n            removeNode(code);\r\n        }\r\n        else {\r\n            removeNode(this.nodeDick[code]);\r\n        }\r\n        return isSuccess;\r\n    };\r\n    /**\r\n     * 获取节点类型\r\n     * @param {string | rSu.Node} code\r\n     * @returns {string}\r\n     */\r\n    WorkerEditor.prototype.getNdType = function (code) {\r\n        if ('object' == typeof code) {\r\n            code = code.code;\r\n        }\r\n        var type;\r\n        if (code) {\r\n            if (this.nodeDick[code]) {\r\n                type = 'node';\r\n            }\r\n            else if (this.connDick[code]) {\r\n                type = 'conn';\r\n            }\r\n            else if (this.textDick[code]) {\r\n                type = 'text';\r\n            }\r\n        }\r\n        return type;\r\n    };\r\n    /**\r\n     * 循环获取节点， tab 节点选择切换\r\n     * @param {string|null} type 类型 c-conn, t-text\r\n     */\r\n    WorkerEditor.prototype.tab = function (type) {\r\n        var _this = this;\r\n        var cSelEd = this.select(), code = cSelEd ? cSelEd.code : null, findLastMk = false, // 找到最后一个\r\n        successMk = false, // 匹配到标志\r\n        nt = cSelEd ? cSelEd.NodeType : ''; // 节点类型\r\n        // 节点选择处理函数            \r\n        var handlerNodeSelFn = function (cd, node) {\r\n            if (!cSelEd) {\r\n                node.select();\r\n                successMk = true;\r\n                return false;\r\n            }\r\n            else {\r\n                if (findLastMk) { // 正好遍历到\r\n                    _this.removeAllSeled();\r\n                    node.select();\r\n                    successMk = true;\r\n                    return false;\r\n                }\r\n                else if (code == node.code) {\r\n                    findLastMk = true;\r\n                }\r\n            }\r\n        };\r\n        if ('c' == type) { // 连线\r\n            if (nt && ('ln' != nt || 'ln_poly' != nt)) {\r\n                this.removeAllSeled();\r\n            }\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.connDick, function (cd, node) {\r\n                return handlerNodeSelFn(cd, node);\r\n            });\r\n        }\r\n        else if ('t' == type) {\r\n            if (nt && ('text' != nt)) {\r\n                this.removeAllSeled();\r\n            }\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.textDick, function (cd, node) {\r\n                return handlerNodeSelFn(cd, node);\r\n            });\r\n        }\r\n        else {\r\n            var isUnNode = false;\r\n            if (nt) {\r\n                if ('ln' == nt || 'ln_poly' == nt) {\r\n                    isUnNode = true;\r\n                }\r\n                else if ('text' == nt) {\r\n                    isUnNode = true;\r\n                }\r\n            }\r\n            if (isUnNode) {\r\n                this.removeAllSeled();\r\n            }\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (cd, node) {\r\n                return handlerNodeSelFn(cd, node);\r\n            });\r\n        }\r\n        // 没有找到时从新开始，且存在元素\r\n        if (findLastMk && !successMk) {\r\n            this.removeAllSeled();\r\n            this.tab(type);\r\n        }\r\n    };\r\n    /**\r\n     * 节点复制\r\n     * @param {string} code\r\n     */\r\n    WorkerEditor.prototype.clone = function (code) {\r\n        var node, newNode, $this = this;\r\n        if (code && 'string' == typeof code) {\r\n            node = this.nodeDick[code];\r\n        }\r\n        else if (code && 'object' == typeof code) {\r\n            node = code;\r\n        }\r\n        else {\r\n            node = this.select();\r\n        }\r\n        if (node) {\r\n            var newOpt = _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].clone(node.opt), rate = 0.2;\r\n            newOpt.cx += newOpt.w * rate;\r\n            newOpt.cy += newOpt.h * rate;\r\n            newNode = this.ndMer.make(node.NodeType, newOpt)\r\n                .creator()\r\n                .moveable({\r\n                beforeMv: function (node) {\r\n                    if ($this.previewMk) {\r\n                        return false;\r\n                    }\r\n                },\r\n                afterUpd: function (x, y, node) {\r\n                    $this._lineMoveSync(x, y, node);\r\n                    $this.onNodeResize();\r\n                }\r\n            });\r\n            // 切换选中状态\r\n            this.removeAllSeled();\r\n            newNode.select();\r\n            this._nodeBindEvt(newNode);\r\n            var ndType = newNode.NodeType;\r\n            if ('text' == ndType) {\r\n                var tIdx = this._order('t', 'T');\r\n                newNode.data('_code', tIdx);\r\n                this.textDick[tIdx] = newNode;\r\n            }\r\n            else {\r\n                var _index = this._order('n', 'A');\r\n                // 保存到字典中\r\n                newNode.data('_code', _index);\r\n                this.nodeDick[_index] = newNode;\r\n            }\r\n        }\r\n        return newNode;\r\n    };\r\n    /**\r\n     * 粘贴\r\n     */\r\n    WorkerEditor.prototype.paste = function (data) {\r\n        var _this = this;\r\n        var $this = this;\r\n        data = 'object' == typeof data ? data : [];\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(data, function (i, dd) {\r\n            var code = dd.code, opt = dd.opt, NodeType = dd.NodeType, type = dd.type, rate = 0.2;\r\n            opt.cx += opt.w * rate;\r\n            opt.cy += opt.h * rate;\r\n            var newNode = _this.ndMer.make(NodeType, opt)\r\n                .creator();\r\n            if ('node' == type) {\r\n                newNode.moveable({\r\n                    beforeMv: function (node) {\r\n                        if ($this.previewMk) {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    afterUpd: function (x, y, node) {\r\n                        $this._lineMoveSync(x, y, node);\r\n                        $this.onNodeResize();\r\n                    }\r\n                });\r\n                var _index = _this._order('n', 'A', code);\r\n                newNode.data('_code', _index);\r\n                _this._nodeBindEvt(newNode);\r\n                _this.nodeDick[_index] = newNode;\r\n            }\r\n            else if ('conn' == type) {\r\n                var _index_1 = _this._order('c', 'C', code);\r\n                newNode.data('_code', _index_1);\r\n                // 连线处理\r\n                _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(dd.data, function (k, v) {\r\n                    var lnNode;\r\n                    switch (k) {\r\n                        case 'from_code':\r\n                            lnNode = $this.nodeDick[v];\r\n                            if (lnNode) {\r\n                                lnNode.line(_index_1);\r\n                            }\r\n                            break;\r\n                        case 'to_code':\r\n                            lnNode = $this.nodeDick[v];\r\n                            if (lnNode) {\r\n                                lnNode.line(_index_1, true);\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n                _this._lineBindEvt(newNode);\r\n                // 保存到字典中\r\n                _this.connDick[_index_1] = newNode;\r\n            }\r\n            else if ('text' == type) {\r\n                var _index = _this._order('t', 'T', code);\r\n                newNode.data('_code', _index);\r\n                _this.textDick[_index] = newNode;\r\n            }\r\n            newNode.data(dd.data);\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * 获取赋值的结果数据\r\n     * 复制\r\n     */\r\n    WorkerEditor.prototype.copy = function () {\r\n        // >>>\r\n        //>> [{code:code, opt: nodeOpt, cls: ''}]\r\n        var data = [], bkg = this.config.bkg || {}, bkgUrunNd = bkg.urunNd || '#CDC5BF', bkgUrunTxt = bkg.urunTxt || '#000000', stateMask = false;\r\n        var pushToData = function (code, type, node) {\r\n            var opt = _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].clone(node.opt), NodeType = node.NodeType, dd = node.data();\r\n            // 状态过滤-2018年5月22日 星期二\r\n            if (dd.state && opt.bkg) {\r\n                delete dd.state;\r\n                // 节点生成\r\n                opt.bkg = bkgUrunNd;\r\n                opt.bkgTxt = bkgUrunTxt;\r\n                stateMask = true;\r\n            }\r\n            else if (stateMask && 'conn' == type) {\r\n                // 节点生成\r\n                opt.bkg = bkgUrunNd;\r\n            }\r\n            // 数据推送到保存栈                \r\n            data.push({\r\n                code: code, opt: opt, NodeType: NodeType, type: type,\r\n                data: dd\r\n            });\r\n        };\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (code, node) {\r\n            if (node.isSelEd) {\r\n                pushToData(code, 'node', node);\r\n            }\r\n        });\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.connDick, function (code, node) {\r\n            if (node.isSelEd) {\r\n                pushToData(code, 'conn', node);\r\n            }\r\n        });\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.textDick, function (code, node) {\r\n            if (node.isSelEd) {\r\n                pushToData(code, 'text', node);\r\n            }\r\n        });\r\n        return data;\r\n    };\r\n    /**\r\n     * 获取选中的实例(单节点)\r\n     */\r\n    WorkerEditor.prototype.select = function () {\r\n        var selectedNode = null;\r\n        // 节点扫描\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (k, node) {\r\n            if (node.isSelEd) {\r\n                selectedNode = node;\r\n                return false;\r\n            }\r\n        });\r\n        // 连线扫描\r\n        if (!selectedNode) {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.connDick, function (k, node) {\r\n                if (node.isSelEd) {\r\n                    selectedNode = node;\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n        // 扫描文本\r\n        if (!selectedNode) {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.textDick, function (k, node) {\r\n                if (node.isSelEd) {\r\n                    selectedNode = node;\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n        return selectedNode;\r\n    };\r\n    /**\r\n     * 选中连接实例的点(分组，所有节点)\r\n     * @returns {object} {type: node[]} -> {node: [], conn: [], text: []}\r\n     */\r\n    WorkerEditor.prototype.selectGroup = function () {\r\n        var mNode = {\r\n            node: [],\r\n            conn: [],\r\n            text: []\r\n        };\r\n        // 节点\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (cd, nd) {\r\n            if (nd.isSelEd) {\r\n                mNode.node.push(nd);\r\n            }\r\n        });\r\n        // 连线\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.connDick, function (cd, nd) {\r\n            if (nd.isSelEd) {\r\n                mNode.node.push(nd);\r\n            }\r\n        });\r\n        // 文本\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.textDick, function (cd, nd) {\r\n            if (nd.isSelEd) {\r\n                mNode.node.push(nd);\r\n            }\r\n        });\r\n        return mNode;\r\n    };\r\n    /**\r\n     * 获取节点属性\r\n     * @memberof WorkerEditor\r\n     */\r\n    WorkerEditor.prototype.step = function (node) {\r\n        var _this = this;\r\n        node = node ? node : this.select();\r\n        if ('object' != typeof node) {\r\n            node = this.connDick[node];\r\n        }\r\n        var step, _srroo;\r\n        if (node) {\r\n            var conLns = node.conLns, from = conLns.from, to = conLns.to, fromQue_1 = [], toQue_1 = [];\r\n            // 起点\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(from, function (idx, cc) {\r\n                var cnIst = _this.connDick[cc];\r\n                if (cnIst) {\r\n                    var tCode = cnIst.data('to_code'), tPosi = cnIst.data('to_posi');\r\n                    toQue_1.push(cnIst.data('to_code'));\r\n                }\r\n            });\r\n            // 终点\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(to, function (idx, cc) {\r\n                var cnIst = _this.connDick[cc];\r\n                if (cnIst) {\r\n                    var fCode = cnIst.data('from_code'), fPosi = cnIst.data('from_posi');\r\n                    fromQue_1.push(cnIst.data('from_code'));\r\n                }\r\n            });\r\n            step = {};\r\n            // 正式数据\r\n            step.code = node.code;\r\n            step.name = node.name;\r\n            step.type = node.type;\r\n            step.next = toQue_1.join(',');\r\n            step.prev = fromQue_1.join(',');\r\n            // 坐标点属性值\r\n            _srroo = {\r\n                opt: node.opt,\r\n                NodeType: node.NodeType,\r\n                textTip: node.textTip\r\n            };\r\n            var nStep = this.onStep(node, step);\r\n            if (nStep) {\r\n                step = nStep;\r\n            }\r\n        }\r\n        return {\r\n            step: step,\r\n            _srroo: _srroo\r\n        };\r\n    };\r\n    /**\r\n     * 保存，且获取数据\r\n     *\r\n     * @memberof WorkerEditor\r\n     */\r\n    WorkerEditor.prototype.save = function () {\r\n        var _this = this;\r\n        var stepStru = [], nodeSrroo = {}, line = {}, text = {}, _srroo = {};\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (code, node) {\r\n            var stepData = _this.step(node);\r\n            stepStru.push(stepData.step);\r\n            nodeSrroo[code] = stepData._srroo;\r\n        });\r\n        // 连线\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.connDick, function (cd, ist) {\r\n            line[cd] = {\r\n                data: ist.data(),\r\n                NodeType: ist.NodeType,\r\n                opt: ist.opt,\r\n                textTip: ist.textTip\r\n            };\r\n        });\r\n        // 文本\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.textDick, function (cd, ist) {\r\n            text[cd] = {\r\n                data: ist.data(),\r\n                NodeType: ist.NodeType,\r\n                opt: ist.opt,\r\n                textTip: ist.textTip\r\n            };\r\n        });\r\n        _srroo = { node: nodeSrroo, line: line, text: text };\r\n        return {\r\n            step: stepStru,\r\n            _srroo: _srroo\r\n        };\r\n    };\r\n    /**\r\n     * 数据加载\r\n     * @param {any} data\r\n     * @returns\r\n     * @memberof WorkerEditor\r\n     */\r\n    WorkerEditor.prototype.load = function (data) {\r\n        var _this = this;\r\n        var $this = this, lineQue = {};\r\n        var step = data.step, _srroo = data._srroo;\r\n        // 文件加载以后才显示\r\n        var config = this.config, rCodes = config.rCodes || null, bkg = config.bkg || {}, noIcon = 'undefined' == typeof config.icon, icon = config.icon || {};\r\n        // 节点生成复原\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(_srroo.node, function (cd, nd) {\r\n            // 节点生成\r\n            nd.opt.bkg = bkg.urunNd || '#CDC5BF';\r\n            nd.opt.bkgTxt = bkg.urunTxt || '#000000';\r\n            var $node = _this.ndMer.make(nd.NodeType, nd.opt)\r\n                .creator();\r\n            // 禁止拖动     \r\n            if (!config.disDragble) {\r\n                $node.moveable({\r\n                    beforeMv: function (node) {\r\n                        if ($this.previewMk) {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    afterUpd: function (x, y, node) {\r\n                        $this._lineMoveSync(x, y, node);\r\n                        // 图标处理，存在图片同步移动\r\n                        var icon = $node.tRElem['icon'];\r\n                        if (icon) {\r\n                            var iconP = $node.getIconP();\r\n                            icon.attr({\r\n                                x: iconP.x,\r\n                                y: iconP.y\r\n                            });\r\n                        }\r\n                        $this.onNodeResize();\r\n                    }\r\n                });\r\n            }\r\n            // 保存到字典中\r\n            $node.data('_code', cd);\r\n            // 悬停提示\r\n            $node.textTip = nd.textTip || null;\r\n            _this._nodeBindEvt($node);\r\n            $this.nodeDick[cd] = $node;\r\n        });\r\n        // 连线生成处理\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(_srroo.line, function (cd, ln) {\r\n            var _data = ln.data;\r\n            var $ln = _this.ndMer.make(ln.NodeType, ln.opt)\r\n                .creator();\r\n            // 禁止拖动     \r\n            if (!config.disDragble) {\r\n                $ln.moveable({\r\n                    beforeMv: function (node) {\r\n                        if ($this.previewMk) {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    afterUpd: function (x, y, node) {\r\n                        $this._lineMoveSync(x, y, node);\r\n                    }\r\n                });\r\n            }\r\n            $ln.data('_code', cd);\r\n            $ln.data(_data);\r\n            var fCode = _data.from_code, tCode = _data.to_code;\r\n            var fIst = _this.nodeDick[fCode], tIst = _this.nodeDick[tCode];\r\n            _this._lineBindEvt($ln);\r\n            _this.connDick[cd] = $ln;\r\n            if (fIst) { // 起点\r\n                fIst.line(cd);\r\n            }\r\n            if (tIst) { // 终点\r\n                tIst.line(cd, true);\r\n            }\r\n            // 悬停提示\r\n            $ln.textTip = ln.textTip || null;\r\n        });\r\n        // 文本生成\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(_srroo.text, function (cd, dd) {\r\n            var _data = dd.data;\r\n            var $ist = _this.ndMer.make(dd.NodeType, dd.opt)\r\n                .creator();\r\n            // 禁止拖动     \r\n            if (!config.disDragble) {\r\n                $ist.moveable({\r\n                    beforeMv: function (node) {\r\n                        if ($this.previewMk) {\r\n                            return false;\r\n                        }\r\n                    },\r\n                    afterUpd: function (x, y, node) {\r\n                        $this._lineMoveSync(x, y, node);\r\n                    }\r\n                });\r\n            }\r\n            $ist.data('_code', cd);\r\n            $ist.data(_data);\r\n            _this._nodeBindEvt($ist);\r\n            _this.textDick[cd] = $ist;\r\n            // 悬停提示\r\n            $ist.textTip = dd.textTip || null;\r\n        });\r\n        // 自动撑高\r\n        if (!config.closeSize) {\r\n            this.autoSize();\r\n        }\r\n        // 禁止状态渲染\r\n        if (!config.disSR) {\r\n            this.stateRender();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 状态渲染\r\n     */\r\n    WorkerEditor.prototype.stateRender = function () {\r\n        var _this = this;\r\n        var config = this.config, rCodes = config.rCodes, $this = this;\r\n        // 运行状态\r\n        if (rCodes) {\r\n            var bkg = config.bkg || {}, urunNd = bkg.urunNd || '#CDC5BF', urunTxt = bkg.urunNd || '#000000', runningNd_1 = bkg.runningNd || '#0000FF', runningTxt_1 = bkg.runningTxt || '#FFFFFF', ranNd_1 = bkg.ranNd || '#32CD32', ranTxt_1 = bkg.ranTxt || '#FFFFFF';\r\n            var noIcon_1 = 'undefined' == typeof config.icon, icon = config.icon || {};\r\n            // 字符串转数组类型\r\n            if ('object' != typeof rCodes) {\r\n                if (rCodes.indexOf(',') > -1) {\r\n                    rCodes = rCodes.replace(/\\s/g, '');\r\n                    rCodes = rCodes.split(',');\r\n                }\r\n                else {\r\n                    rCodes = [rCodes];\r\n                }\r\n            }\r\n            // 生成图标\r\n            var iconState_1 = icon.state || {};\r\n            var createIconFn_1 = function (iconSrc, node) {\r\n                if (noIcon_1) {\r\n                    return;\r\n                }\r\n                var iconP = node.getIconP();\r\n                if (iconP) {\r\n                    var rect = 10;\r\n                    node.tRElem['icon'] = _this.paper.image(iconSrc, iconP.x, iconP.y, rect, rect);\r\n                }\r\n            };\r\n            // 变量连线，用于连线渲染\r\n            var conRendMap_1 = {};\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.connDick, function (cd, ist) {\r\n                var cData = ist.data(), from_code = cData.from_code, to_code = cData.to_code;\r\n                if (!from_code || !to_code) {\r\n                    return;\r\n                }\r\n                var crmKey = from_code + \"_\" + to_code;\r\n                conRendMap_1[crmKey] = cd;\r\n            });\r\n            // console.log(conRendMap);\r\n            // 渲染处理\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(rCodes, function (i, cd) {\r\n                // 正在运行\r\n                var isRunningMk = false;\r\n                if (cd.indexOf('*') > -1) {\r\n                    cd = cd.replace('*', '');\r\n                    isRunningMk = true;\r\n                }\r\n                var node = _this.nodeDick[cd];\r\n                if (!node) {\r\n                    return;\r\n                }\r\n                // 节点渲染\r\n                if (isRunningMk) { // 正在运行\r\n                    node.data('state', 'isRunning');\r\n                    node.opt.bkg = runningNd_1;\r\n                    node.opt.bkgTxt = runningTxt_1;\r\n                    node.background(['node', 'text']);\r\n                    createIconFn_1(iconState_1.ran || 'state_ran.png', node);\r\n                }\r\n                else { // 已经运行\r\n                    node.data('state', 'isRan');\r\n                    node.opt.bkg = ranNd_1;\r\n                    node.opt.bkgTxt = ranTxt_1;\r\n                    node.background(['node', 'text']);\r\n                    createIconFn_1(iconState_1.ran || 'state_ran.png', node);\r\n                }\r\n                // 徽标\r\n                var iconImg = node.tRElem['icon'];\r\n                if (iconImg) {\r\n                    iconImg.hover(function () {\r\n                        // f_in\r\n                        var state = node.data('state');\r\n                        var title = '';\r\n                        switch (state) {\r\n                            case 'isRan':\r\n                                title = '已经运行';\r\n                                break;\r\n                            case 'isRunning':\r\n                                title = '正在运行中';\r\n                                break;\r\n                        }\r\n                        var offset = $this.getDomOffset();\r\n                        $this.tooltip(title, this.attr('x') + offset.left + 20, this.attr('y') + offset.top + 2);\r\n                    }, function () {\r\n                        $this.tooltip('');\r\n                    });\r\n                }\r\n                // 连线渲染\r\n                var crmKey2 = i > 0 ? rCodes[i - 1] + \"_\" + cd : null, lnCd, lnIst;\r\n                if (crmKey2 && (lnCd = conRendMap_1[crmKey2]) && (lnIst = _this.connDick[lnCd])) {\r\n                    var bkgCol = isRunningMk ? runningNd_1 : ranNd_1;\r\n                    lnIst.opt.bkg = bkgCol;\r\n                    lnIst.c.attr('stroke', bkgCol);\r\n                    // 箭头，箭体颜色一致性变化\r\n                    if (lnIst.inlineEle) {\r\n                        lnIst.inlineEle.attr('stroke', bkgCol);\r\n                        lnIst.inlineEle.attr('fill', bkgCol);\r\n                    }\r\n                    // 直线箭体颜色\r\n                    if ('ln' == lnIst.NodeType) {\r\n                        lnIst.c.attr('fill', bkgCol);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 移除临时节点\r\n     * @param {string|array} value\r\n     */\r\n    WorkerEditor.prototype.removeTmpNode = function (value) {\r\n        var _this = this;\r\n        if (value) {\r\n            var queue = [];\r\n            if ('object' == typeof value) {\r\n                queue = value;\r\n            }\r\n            else {\r\n                queue = [value];\r\n            }\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(queue, function (k, v) {\r\n                if (_this.tmpNodeMap[v]) {\r\n                    _this.tmpNodeMap[v].delete();\r\n                    delete _this.tmpNodeMap[v];\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.tmpNodeMap, function (k, nd) {\r\n                nd.delete();\r\n                delete _this.tmpNodeMap[k];\r\n            });\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 通过点坐标计算相碰撞的元素\r\n     */\r\n    WorkerEditor.prototype.collisionByP = function (x, y) {\r\n        var tmpNode;\r\n        // 点坐标自动转换\r\n        if ('object' == typeof x) {\r\n            var nX = x.x, nY = x.y;\r\n            x = nX;\r\n            y = nY;\r\n        }\r\n        if (x && y) {\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (index, nd) {\r\n                var boxdt = nd.getBBox(), attr = boxdt.attr, ps = boxdt.ps, width = attr.width, height = attr.height, x1 = attr.x, y1 = attr.y;\r\n                if ((x >= x1 && x <= x1 + width) &&\r\n                    (y >= y1 && y <= y1 + height)) {\r\n                    tmpNode = nd;\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n        return tmpNode;\r\n    };\r\n    /**\r\n     * 预览，启动预览\r\n     * @param disable 是否禁止\r\n     */\r\n    WorkerEditor.prototype.preview = function (disable) {\r\n        if (disable) {\r\n            if (this.toolbarCtrl) {\r\n                this.toolbarCtrl.show();\r\n            }\r\n            this.previewMk = false;\r\n        }\r\n        else {\r\n            // 隐藏工具栏\r\n            if (this.toolbarCtrl) {\r\n                this.toolbarCtrl.hide();\r\n            }\r\n            this.previewMk = true;\r\n        }\r\n    };\r\n    /**\r\n     * 悬停提示\r\n     * @param text\r\n     * @param x\r\n     * @param y\r\n     */\r\n    WorkerEditor.prototype.tooltip = function (text, x, y) {\r\n        var ctrl = $('.flowts-tip');\r\n        if (!text) {\r\n            if (ctrl.length > 0) {\r\n                ctrl.hide();\r\n            }\r\n            return;\r\n        }\r\n        if (ctrl.length == 0) {\r\n            ctrl = $('<div class=\"flowts-tip\"></div>');\r\n            $('body').append(ctrl);\r\n        }\r\n        ctrl.show();\r\n        ctrl.html(text);\r\n        if (x && y) {\r\n            ctrl.css({\r\n                top: y,\r\n                left: x\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * dom 坐标地址\r\n     */\r\n    WorkerEditor.prototype.getDomOffset = function () {\r\n        var dom = this.config.dom;\r\n        return {\r\n            left: dom[0].offsetLeft,\r\n            top: dom[0].offsetTop\r\n        };\r\n    };\r\n    /**\r\n     * 错误连线\r\n     * @param {boolean} noClear\r\n     */\r\n    WorkerEditor.prototype.errorLine = function (noClear) {\r\n        var hasErr = false;\r\n        if (!noClear) {\r\n            this.removeAllSeled();\r\n        }\r\n        var cRecordM = {}; // 节点连线记录\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.connDick, function (code, node) {\r\n            var data = node.data(), to_code = data.to_code, from_code = data.from_code;\r\n            if (!to_code || !from_code) {\r\n                node.select();\r\n                hasErr = true;\r\n            }\r\n            else {\r\n                // 重复的连线\r\n                var key = from_code + \"__\" + to_code;\r\n                if (cRecordM[key]) {\r\n                    node.select();\r\n                    hasErr = true;\r\n                }\r\n                else {\r\n                    cRecordM[key] = true;\r\n                }\r\n            }\r\n        });\r\n        return hasErr;\r\n    };\r\n    /**\r\n     * 获取的节点\r\n     * @param {boolean} noClear\r\n     */\r\n    WorkerEditor.prototype.errorNode = function (noClear) {\r\n        var _this = this;\r\n        var hasErr = false;\r\n        if (!noClear) {\r\n            this.removeAllSeled();\r\n        }\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (code, node) {\r\n            var type = node.type;\r\n            // 不是开始或者结束\r\n            if (1 != type && 9 != type) {\r\n                var data = _this.step(node), step = data.step;\r\n                if (!step.next || !step.prev) {\r\n                    node.select();\r\n                    hasErr = true;\r\n                }\r\n            }\r\n        });\r\n        return hasErr;\r\n    };\r\n    /**\r\n     * 显示所有错误\r\n     */\r\n    WorkerEditor.prototype.error = function () {\r\n        var hasErr = false;\r\n        this.removeAllSeled();\r\n        hasErr = this.errorLine(true);\r\n        var hasErr2 = this.errorNode(true);\r\n        hasErr = hasErr ? hasErr : hasErr2;\r\n        return hasErr;\r\n    };\r\n    Object.defineProperty(WorkerEditor.prototype, \"maxHw\", {\r\n        /**\r\n         * 获取节点最大的宽度\r\n         */\r\n        get: function () {\r\n            var m = { h: 0, w: 0 };\r\n            // 节点扫描\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.nodeDick, function (k, nd) {\r\n                var box = nd.getBBox(), attr = box.attr, y = attr.y + attr.height, x = attr.x + attr.width;\r\n                if (y > m.h) {\r\n                    m.h = y;\r\n                }\r\n                if (x > m.w) {\r\n                    m.w = x;\r\n                }\r\n            });\r\n            // 文本扫描\r\n            _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(this.textDick, function (k, nd) {\r\n                var box = nd.getBBox(), attr = box.attr, y = attr.y + attr.height, x = attr.x + attr.width;\r\n                if (y > m.h) {\r\n                    m.h = y;\r\n                }\r\n                if (x > m.w) {\r\n                    m.w = x;\r\n                }\r\n            });\r\n            return m;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * 尺寸自适应，为弥补不同画布之间尺寸不一致\r\n     * @memberof WorkerEditor\r\n     */\r\n    WorkerEditor.prototype.autoSize = function () {\r\n        var config = this.config;\r\n        var hw = this.maxHw, $svg = config.dom.find('svg'), \r\n        // cW: number = $svg.attr('width'),\r\n        // cH: number = $svg.attr('height'),\r\n        dt = 10;\r\n        // 宽度\r\n        if (hw.w > config.w) {\r\n            $svg.attr('width', hw.w + dt);\r\n        }\r\n        // 高度\r\n        if (hw.h > config.h) {\r\n            $svg.attr('height', hw.h + dt);\r\n        }\r\n    };\r\n    /**\r\n     * 双击事件\r\n     * @param node\r\n     */\r\n    WorkerEditor.prototype.onDbClick = function (node) { };\r\n    /**\r\n     * 点击事件\r\n     * @param node\r\n     */\r\n    WorkerEditor.prototype.onClick = function (node) { };\r\n    /**\r\n     * 节点保存时处理事件\r\n     * @param node\r\n     * @return {object|null} 返回值时可以覆盖参数\r\n     */\r\n    WorkerEditor.prototype.onStep = function (node, data) {\r\n        return data;\r\n    };\r\n    /**\r\n     * 节点重载以后的事件\r\n     */\r\n    WorkerEditor.prototype.onNodeResize = function () {\r\n        this.autoSize();\r\n    };\r\n    // 静态属性\r\n    WorkerEditor.version = _version__WEBPACK_IMPORTED_MODULE_1__[\"LibVersion\"];\r\n    return WorkerEditor;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (WorkerEditor);\r\n\n\n//# sourceURL=webpack:///./src/WorkerEditor.ts?");

/***/ }),

/***/ "./src/algo/LnPolyConnFn.ts":
/*!**********************************!*\
  !*** ./src/algo/LnPolyConnFn.ts ***!
  \**********************************/
/*! exports provided: LnPolyConn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LnPolyConn\", function() { return LnPolyConn; });\n/* harmony import */ var _node_NodeUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node/NodeUtil */ \"./src/node/NodeUtil.ts\");\n/**\r\n * 折线连线处理算法，函数\r\n */\r\n\r\n/**\r\n * 内部私有类，用于数据处理\r\n * 2018年5月22日 星期二\r\n */\r\nvar cSR = /** @class */ (function () {\r\n    function cSR() {\r\n    }\r\n    /**\r\n     * 代理节点连接点\r\n     * @param nd 节点\r\n     * @param posi 位置\r\n     * @param opt 选项 {dn: number, box: rSu.BoxAttr}\r\n     */\r\n    cSR.agentNodeCnP = function (nd, posi, opt) {\r\n        opt = 'object' == typeof opt ? opt : {};\r\n        var p, dtNum = opt.dn || 20 // 相差值\r\n        , box = opt.box || nd.getBBox(), ps = box.ps, tP;\r\n        switch (posi) {\r\n            case 'b': // 正上\r\n                tP = ps.b;\r\n                p = { x: tP.x, y: tP.y - dtNum };\r\n                break;\r\n            case 'd': // 正右\r\n                tP = ps.d;\r\n                p = { x: tP.x + dtNum, y: tP.y };\r\n                break;\r\n            case 'f': // 正下\r\n                tP = ps.f;\r\n                p = { x: tP.x, y: tP.y + dtNum };\r\n                break;\r\n            case 'h': // 正左\r\n                tP = ps.h;\r\n                p = { x: tP.x - dtNum, y: tP.y };\r\n                break;\r\n        }\r\n        return p;\r\n    };\r\n    return cSR;\r\n}());\r\n/**\r\n * @export\r\n * @param {rSu.Node} ln\r\n * @param {rSu.WEditor} work\r\n * @param {rSu.Node} [tNd]\r\n */\r\nfunction LnPolyConn(ln, work, tNd) {\r\n    var data = ln.data(), from_code = data.from_code, to_code = data.to_code, fPosi = data.from_posi, tPosi = data.to_posi;\r\n    // 没有终点节点，自动从连线中获取\r\n    if (!tNd) {\r\n        tNd = work.nodeDick[to_code];\r\n    }\r\n    var fNd = work.nodeDick[from_code];\r\n    if (tNd && tNd.code == fNd.code) { // 自身连接\r\n        var AncpOpt = {\r\n            box: fNd.getBBox()\r\n        };\r\n        var ap1 = cSR.agentNodeCnP(fNd, fPosi, AncpOpt), ap2 = cSR.agentNodeCnP(fNd, tPosi, AncpOpt);\r\n        var apMd = void 0;\r\n        // = (ap1 && ap2)? NodeUtil.polyP(ap1, ap2, 'ua') : null\r\n        if ((fPosi == 'f' && (tPosi == 'd' || tPosi == 'h'))\r\n            || (fPosi == 'b' && (tPosi == 'h' || tPosi == 'd'))) {\r\n            // 上角拐\r\n            apMd = _node_NodeUtil__WEBPACK_IMPORTED_MODULE_0__[\"default\"].polyP(ap1, ap2, 'ua');\r\n        }\r\n        else if (((fPosi == 'h' || fPosi == 'd') && tPosi == 'f')\r\n        // || (fPosi == 'b' && (tPosi == 'h' || tPosi == 'd'))\r\n        ) {\r\n            // 下角拐\r\n            apMd = _node_NodeUtil__WEBPACK_IMPORTED_MODULE_0__[\"default\"].polyP(ap1, ap2, 'la');\r\n        }\r\n        // console.log(ap1, apMd, ap2);\r\n        if (apMd) {\r\n            ln.updAttr({\r\n                MPs: [ap1, apMd, ap2]\r\n            });\r\n        }\r\n    }\r\n    else if (tNd) {\r\n        var fNd_1 = work.nodeDick[from_code], P1 = ln.opt.P1, // 连线起点\r\n        P2 = ln.opt.P2, // 连接终点\r\n        fOpt = fNd_1.opt, tOpt = tNd.opt, dtX = 10, // X 轴偏差\r\n        dtY = 10, // Y 轴偏差\r\n        MPs = [], tx = void 0, ty = void 0;\r\n        // console.log(tPosi, fPosi)\r\n        // 侧面连接线\r\n        if ('d' == fPosi || 'h' == fPosi) {\r\n            // 同X轴\r\n            if (Math.abs(fOpt.cx - tOpt.cx) <= dtX) {\r\n                // console.log(fPosi, tPosi)\r\n                // 同向\r\n                var _dx = ('d' == fPosi ? 1 : -1) * (dtX + 20);\r\n                if (fPosi == tPosi) {\r\n                    tx = P1.x + _dx;\r\n                    MPs.push({ x: tx, y: P1.y }, { x: tx, y: P2.y });\r\n                    ln.updAttr({\r\n                        P2: P2,\r\n                        MPs: MPs\r\n                    });\r\n                }\r\n            }\r\n            // 数据接入点\r\n            else if ('b' == tPosi) {\r\n                var p = _node_NodeUtil__WEBPACK_IMPORTED_MODULE_0__[\"default\"].polyP(P1, P2, 'ua');\r\n                if (p) {\r\n                    MPs.push(p);\r\n                    ln.updAttr({\r\n                        P2: P2,\r\n                        MPs: MPs\r\n                    });\r\n                }\r\n            }\r\n            // 终点结与侧边\r\n            else if ('d' == fPosi || 'h' == fPosi) {\r\n                var _dx = (('d' == tPosi) ? 1 : -1) * (dtX + 20), pE = { x: P2.x + _dx, y: P2.y }, p = _node_NodeUtil__WEBPACK_IMPORTED_MODULE_0__[\"default\"].polyP(P1, pE, 'ua');\r\n                if (p) {\r\n                    MPs.push(p, pE);\r\n                    ln.updAttr({\r\n                        P2: P2,\r\n                        MPs: MPs\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/algo/LnPolyConnFn.ts?");

/***/ }),

/***/ "./src/confNode.ts":
/*!*************************!*\
  !*** ./src/confNode.ts ***!
  \*************************/
/*! exports provided: cNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cNode\", function() { return cNode; });\n/**\r\n * 节点常量配置\r\n */\r\n// 1-开始、2-任务、3-判断、4-审核、5-会签、4-并行、5-合并、8-子流程、9-结束\r\nvar cNode = {\r\n    begin: {\r\n        type: 1,\r\n        text: '开始'\r\n    },\r\n    task: {\r\n        type: 2,\r\n        text: '任务'\r\n    },\r\n    cond: {\r\n        type: 3,\r\n        text: '判断'\r\n    },\r\n    audit: {\r\n        type: 4,\r\n        text: '审核'\r\n    },\r\n    sign: {\r\n        type: 5,\r\n        text: '会签'\r\n    },\r\n    parallel: {\r\n        type: 6,\r\n        text: '并行'\r\n    },\r\n    merge: {\r\n        type: 7,\r\n        text: '合并'\r\n    },\r\n    subFlow: {\r\n        type: 8,\r\n        text: '子流程'\r\n    },\r\n    end: {\r\n        type: 9,\r\n        text: '结束'\r\n    },\r\n    text: {\r\n        type: 9994,\r\n        text: '文本'\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./src/confNode.ts?");

/***/ }),

/***/ "./src/helper.ts":
/*!***********************!*\
  !*** ./src/helper.ts ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\r\n * 2018年1月8日 星期一\r\n * 内部处理类，从 worker.js/flow.js 内部分离\r\n */\r\n// 实例索引序列\r\nvar instanceIndex = 0;\r\nvar instanceSource = {}; // 实列资源队列\r\n// 内部协助函数(私有)\r\nvar H = /** @class */ (function () {\r\n    function H() {\r\n    }\r\n    /**\r\n     * 内部函数生成实例\r\n     * @param {*} config\r\n     */\r\n    H.createInstance = function (config) {\r\n        config = 'object' == typeof config ? config : {};\r\n        if (!config.dom) {\r\n            if (true) {\r\n                console.warn('[Worker] 配置文件无效，缺少 config.dom');\r\n            }\r\n        }\r\n        // 生成 HTML\r\n        if ('string' == typeof config.dom) {\r\n            config.dom = $(config.dom);\r\n        }\r\n        if (!config.w) {\r\n            // config.w = parseInt(width * 1.1)\r\n            config.w = $(window).width() * 1.1;\r\n        }\r\n        if (!config.h) {\r\n            config.h = $(window).height() * 1.1;\r\n        }\r\n        return Raphael(config.dom.get(0), config.w, config.h);\r\n    };\r\n    H.onMoveEvt = function () { };\r\n    H.onStartEvt = function () { };\r\n    H.onEndEvt = function () { };\r\n    /**\r\n     * 内部索引序列\r\n     */\r\n    H.getIndex = function () {\r\n        instanceIndex += 1;\r\n        return instanceIndex;\r\n    };\r\n    /**\r\n     * 内部资源处理\r\n     * @param {number} index\r\n     * @param {string|null} key\r\n     * @param {*} value\r\n     */\r\n    H.src = function (index, key, value) {\r\n        if (!instanceSource[index]) {\r\n            instanceSource[index] = {};\r\n        }\r\n        var dd = instanceSource[index];\r\n        if ('undefined' == typeof key) {\r\n            return dd;\r\n        }\r\n        if ('undefined' == typeof value) {\r\n            return dd[key] || null;\r\n        }\r\n        dd[key] = value;\r\n    };\r\n    return H;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (H);\r\n\n\n//# sourceURL=webpack:///./src/helper.ts?");

/***/ }),

/***/ "./src/node/NodeAbstract.ts":
/*!**********************************!*\
  !*** ./src/node/NodeAbstract.ts ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.ts\");\n/* harmony import */ var _confNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../confNode */ \"./src/confNode.ts\");\n/* harmony import */ var _NodeUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NodeUtil */ \"./src/node/NodeUtil.ts\");\n/* harmony import */ var _WeScreen__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../WeScreen */ \"./src/WeScreen.ts\");\n/**\r\n * 2018年3月26日 星期一\r\n * 抽象节点\r\n */\r\n///<reference path=\"../../index.d.ts\"/>\r\n///<reference path=\"../types/raphael.ts\"/>\r\n\r\n\r\n\r\n\r\n/**\r\n * @export\r\n * @abstract\r\n * @class NodeAbstract\r\n */\r\nvar NodeAbstract = /** @class */ (function () {\r\n    function NodeAbstract(paper, opt) {\r\n        this.conLns = {\r\n            from: [],\r\n            to: []\r\n        };\r\n        this.tRElem = {};\r\n        this._dataQueueDick = {};\r\n        this.isSelEd = false;\r\n        this.paper = paper;\r\n        this.NodeType = null; // 节点类型\r\n        // 传入属性时，设置目前的对象\r\n        if (opt) {\r\n            opt.bkgMagnetic = opt.bkgMagnetic || '#FF0000';\r\n            var features = opt.features || {};\r\n            this.opt = opt;\r\n        }\r\n        this._onInit();\r\n    }\r\n    /**\r\n     * 特征值处理\r\n     * @param {string|object} key\r\n     * @param {*} value\r\n     * @param {*} def  默认值，默认时会自动设置参数\r\n     */\r\n    NodeAbstract.prototype.feature = function (key, value, def) {\r\n        var feature = this.opt.features || {};\r\n        if (!value) {\r\n            if ('object' == typeof key) {\r\n                return null;\r\n            }\r\n            var gValue = feature[key] || null;\r\n            if (def && !gValue) {\r\n                feature[key] = def;\r\n                this.opt.features = feature;\r\n                return def;\r\n            }\r\n            return gValue;\r\n        }\r\n        else {\r\n            if ('object' == typeof key) {\r\n                feature = _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].jsonMerge(feature, key);\r\n            }\r\n            else {\r\n                feature[key] = value;\r\n            }\r\n            this.opt.features = feature;\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * @param {string|number|object} key _code 特殊属性\r\n     * @param {*} value\r\n     */\r\n    NodeAbstract.prototype.data = function (key, value) {\r\n        var _this = this;\r\n        if ('undefined' == typeof value) {\r\n            if ('undefined' == typeof key) {\r\n                return _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].clone(this._dataQueueDick);\r\n            }\r\n            else if ('object' == typeof key) {\r\n                _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].each(key, function (k, v) {\r\n                    _this._dataQueueDick[k] = v;\r\n                });\r\n                return this;\r\n            }\r\n            return this._dataQueueDick[key];\r\n        }\r\n        else {\r\n            this._dataQueueDick[key] = value;\r\n            // 特殊处理，保持 code 只读，首次写入时保存\r\n            if (!this._code && key == '_code') {\r\n                this._code = value;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Object.defineProperty(NodeAbstract.prototype, \"code\", {\r\n        /**\r\n         * 获取代码，使之只读\r\n         */\r\n        get: function () {\r\n            return this._code;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NodeAbstract.prototype, \"name\", {\r\n        /**\r\n         * 获取 name 做处理判断\r\n         * @readonly\r\n         * @type {string}\r\n         * @memberof NodeAbstract\r\n         */\r\n        get: function () {\r\n            var txt = this.opt.text || '';\r\n            if (txt && txt.indexOf('\\n') > -1) {\r\n                txt = txt.replace(/\\n/g, '');\r\n            }\r\n            return txt;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NodeAbstract.prototype, \"_key\", {\r\n        /**\r\n         * 键值， { cNode } = confNode 映射\r\n         * @readonly\r\n         * @type {string}\r\n         * @memberof NodeAbstract\r\n         */\r\n        get: function () {\r\n            var nt = this.NodeType;\r\n            if (nt.indexOf('_') > -1) {\r\n                var aStr_1 = nt.split('_');\r\n                _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].each(aStr_1, function (idx, v) {\r\n                    if (idx > 0) {\r\n                        v = v.substr(0, 1).toLocaleUpperCase() + v.substr(1);\r\n                        aStr_1[idx] = v;\r\n                    }\r\n                });\r\n                nt = aStr_1.join('');\r\n            }\r\n            return nt;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NodeAbstract.prototype, \"type\", {\r\n        /**\r\n         * 获取类型\r\n         * @readonly\r\n         * @type {number}\r\n         * @memberof NodeAbstract\r\n         */\r\n        get: function () {\r\n            var code = this.code, attr = _confNode__WEBPACK_IMPORTED_MODULE_1__[\"cNode\"][this._key], tp = attr ? attr.type : null;\r\n            return tp;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * 节点生成器，外部可访问接口\r\n     * @param opt\r\n     */\r\n    NodeAbstract.prototype.creator = function (opt) {\r\n        this._whenCreatorEvt();\r\n        return this;\r\n    };\r\n    /**\r\n     * 点连线装换为path字符串\r\n     * @param {array} pQue\r\n     * @param {bool} isClose\r\n     * @returns {string}\r\n     */\r\n    NodeAbstract.prototype._ps2Path = function (pQue, isClose) {\r\n        return _NodeUtil__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ps2Path(pQue, isClose);\r\n    };\r\n    /**\r\n     * 点连线转换为字符串数组\r\n     * @param {array} pQue\r\n     * @param {bool} isClose\r\n     * @returns {string}\r\n     */\r\n    NodeAbstract.prototype._ps2PathAttr = function (pQue, isClose) {\r\n        return _NodeUtil__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ps2PathAttr(pQue, isClose);\r\n    };\r\n    /**\r\n     * 连线处理(记录)\r\n     * @param value 参数值\r\n     * @param isEnd\r\n     */\r\n    NodeAbstract.prototype.line = function (value, isEnd) {\r\n        if (isEnd) {\r\n            this.conLns.to.push(value);\r\n        }\r\n        else {\r\n            this.conLns.from.push(value);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 移除连接线\r\n     * @param {string} value\r\n     * @param {boolean} isEnd\r\n     * @returns {rSu.Node}\r\n     */\r\n    NodeAbstract.prototype.rmLine = function (value, isEnd) {\r\n        if (value) {\r\n            if (isEnd) {\r\n                var tLns_1 = [];\r\n                _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].each(this.conLns.to, function (k, code) {\r\n                    if (code != value) {\r\n                        tLns_1.push(code);\r\n                    }\r\n                });\r\n                this.conLns.to = tLns_1;\r\n            }\r\n            else {\r\n                var fLns_1 = [];\r\n                _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].each(this.conLns.from, function (k, code) {\r\n                    if (code != value) {\r\n                        fLns_1.push(code);\r\n                    }\r\n                });\r\n                this.conLns.from = fLns_1;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 创建事件时，处理事件\r\n     */\r\n    NodeAbstract.prototype._whenCreatorEvt = function () { };\r\n    /**\r\n     * 节点初始化 [接口]\r\n     */\r\n    NodeAbstract.prototype._onInit = function () { };\r\n    /**\r\n     * 节点拖动以后处理，调用拖动以后 [接口]\r\n     */\r\n    NodeAbstract.prototype.onDrag = function () { };\r\n    /**\r\n     * 获取两点间的距离\r\n     */\r\n    NodeAbstract.prototype.getPLen = function (P1, P2) {\r\n        return Math.pow((Math.pow((P1.x - P2.x), 2) + Math.pow((P1.y - P2.y), 2)), 1 / 2);\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeAbstract.prototype._updAttr = function (nOpt) {\r\n        for (var key in nOpt) {\r\n            if ('undefined' != typeof this.opt[key]) {\r\n                this.opt[key] = nOpt[key];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 获取文本所在的位置\r\n     */\r\n    NodeAbstract.prototype._getTextPnt = function () {\r\n        var _a = this.opt, cx = _a.cx, cy = _a.cy, p = { x: cx + 1, y: cy + 1 };\r\n        return p;\r\n    };\r\n    /**\r\n     * 节点删除\r\n     */\r\n    NodeAbstract.prototype.delete = function () {\r\n        this.c.remove();\r\n        if (this.label) {\r\n            this.label.remove();\r\n        }\r\n        if (this.inlineEle) {\r\n            this.inlineEle.remove();\r\n        }\r\n        if (this.inlinesEle) {\r\n            this.inlinesEle.forEach(function (ist) {\r\n                ist.remove();\r\n            });\r\n        }\r\n        this.clearTmpElem();\r\n    };\r\n    /**\r\n     * 隐藏\r\n     */\r\n    NodeAbstract.prototype.hide = function () {\r\n        if (this.c) {\r\n            this.c.hide();\r\n        }\r\n        if (this.label) {\r\n            this.label.hide();\r\n        }\r\n        // 内部元素\r\n        if (this.inlinesEle) {\r\n            this.inlinesEle.forEach(function (nd) {\r\n                nd.hide();\r\n            });\r\n        }\r\n        if (this.inlineEle) {\r\n            this.inlineEle.hide();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 显示\r\n     */\r\n    NodeAbstract.prototype.show = function () {\r\n        if (this.c) {\r\n            this.c.show();\r\n        }\r\n        if (this.label) {\r\n            this.label.show();\r\n        }\r\n        // 内部元素\r\n        if (this.inlinesEle) {\r\n            this.inlinesEle.forEach(function (nd) {\r\n                nd.show();\r\n            });\r\n        }\r\n        if (this.inlineEle) {\r\n            this.inlineEle.show();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 节点可移动处理\r\n     * data => {afterUpd(x, y, $node), beforeMv($node)}\r\n     * @returns\r\n     * @memberof NodeAbstract\r\n     */\r\n    NodeAbstract.prototype.moveable = function (data) {\r\n        var $this = this;\r\n        data = 'object' == typeof data ? data : {};\r\n        this.c.undrag();\r\n        var tP = { cx: 0, cy: 0 }, cDnum = 2; // 当前变化的差值\r\n        this.c.drag(function (dx, dy) {\r\n            // 选中节点，未移动\r\n            if (dx == dy && dy == 0) {\r\n                return;\r\n            }\r\n            if (data.beforeMv && 'function' == typeof data.beforeMv) {\r\n                // 阻止移动\r\n                if (false === data.beforeMv($this)) {\r\n                    return;\r\n                }\r\n            }\r\n            dx += tP.cx;\r\n            dy += tP.cy;\r\n            // 屏幕同步移动监听\r\n            _WeScreen__WEBPACK_IMPORTED_MODULE_3__[\"default\"].syncMoving(dx, dy);\r\n            // 结点偏移量检测\r\n            // if(Math.abs(arguments[0]) < cDnum && Math.abs(arguments[1]) < cDnum){\r\n            //     return\r\n            // }\r\n            $this.updAttr({ cx: dx, cy: dy });\r\n            $this.select();\r\n            if (data.afterUpd && 'function' == typeof data.afterUpd) {\r\n                data.afterUpd(dx, dy, $this);\r\n            }\r\n        }, function () {\r\n            var _a = $this.opt, cx = _a.cx, cy = _a.cy;\r\n            tP = { cx: cx, cy: cy };\r\n        });\r\n        return $this;\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeAbstract.prototype.updAttr = function (nOpt) {\r\n        return this;\r\n    };\r\n    /**\r\n     * 文本属性更新\r\n     *\r\n     * @param {string} [text]\r\n     * @memberof NodeAbstract\r\n     */\r\n    NodeAbstract.prototype.updTextAttr = function (text) {\r\n        var _a = this._getTextPnt(), x = _a.x, y = _a.y;\r\n        if (this.label) {\r\n            this.label.attr({\r\n                x: x, y: y\r\n            });\r\n        }\r\n        // 生成文本\r\n        if (text) {\r\n            if (this.label) {\r\n                this.label.attr('text', text);\r\n            }\r\n            else {\r\n                this.label = this.paper.text(x, y, text);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 获取处理以后的边框值\r\n     */\r\n    NodeAbstract.prototype.getBBox = function () {\r\n        var _a = this.c.getBBox(), x = _a.x, y = _a.y, width = _a.width, height = _a.height, boxPadding = this.feature('boxPadding', null, 3);\r\n        x -= boxPadding, y -= boxPadding;\r\n        width += boxPadding * 2, height += boxPadding * 2;\r\n        // 顺时针： \r\n        var mx = x + width / 2, xx = x + width, my = y + height / 2, xy = y + height, ps = {\r\n            a: { x: x, y: y },\r\n            b: { x: mx, y: y },\r\n            c: { x: xx, y: y },\r\n            d: { x: xx, y: my },\r\n            e: { x: xx, y: xy },\r\n            f: { x: mx, y: xy },\r\n            g: { x: x, y: xy },\r\n            h: { x: x, y: my } // H\r\n        };\r\n        var attr = { x: x, y: y, width: width, height: height };\r\n        return { attr: attr, ps: ps };\r\n    };\r\n    /**\r\n     * 获取 icon 坐标地址\r\n     */\r\n    NodeAbstract.prototype.getIconP = function () {\r\n        var p = this._getTextPnt(), _a = this.opt, w = _a.w, h = _a.h;\r\n        p.x -= w / 2 - 5;\r\n        p.y -= h / 2 - 5;\r\n        return p;\r\n    };\r\n    /**\r\n     * 磁化核心，基于碰撞以后的坐标点\r\n     * @param px\r\n     * @param py\r\n     */\r\n    NodeAbstract.prototype.magnCore = function (px, py) {\r\n        var bAttr = this.getBBox(), attr = bAttr.attr, ps = bAttr.ps, x = attr.x, y = attr.y, w = attr.width, h = attr.height;\r\n        // a-h\r\n        var pt, cx1 = x + w / 4, cx = x + w / 2, cx2 = x + w * (3 / 4), cy1 = y + h / 4, cy = y + h / 2, cy2 = y + h * (3 / 4), posi = null;\r\n        if (px <= cx1 && py <= cy1) {\r\n            pt = ps.a;\r\n            posi = 'a';\r\n        }\r\n        else if ((px > cx1 && px < cx2) && py <= cy1) {\r\n            pt = ps.b;\r\n            posi = 'b';\r\n        }\r\n        else if ((px >= cx2) && py <= cy1) {\r\n            pt = ps.c;\r\n            posi = 'c';\r\n        }\r\n        else if ((px >= cx2) && (py > cy1 && py < cy2)) {\r\n            pt = ps.d;\r\n            posi = 'd';\r\n        }\r\n        else if ((px >= cx2) && py >= cy2) {\r\n            pt = ps.e;\r\n            posi = 'e';\r\n        }\r\n        else if ((px > cx1 && px < cx2) && py >= cy2) {\r\n            pt = ps.f;\r\n            posi = 'f';\r\n        }\r\n        else if ((px <= cx1) && py >= cy2) {\r\n            pt = ps.g;\r\n            posi = 'g';\r\n        }\r\n        else if ((px <= cx1) && (py > cy1 && py < cy2)) {\r\n            pt = ps.h;\r\n            posi = 'h';\r\n        }\r\n        // 数据测试\r\n        this.clearTmpElem('mc');\r\n        if (pt) {\r\n            this.tRElem['mc'] = this.paper\r\n                .circle(pt.x, pt.y, 3)\r\n                .attr('fill', this.opt.bkgMagnetic)\r\n                .data('pcode', this.code)\r\n                .data('posi', posi);\r\n        }\r\n        var rElem;\r\n        if (this.tRElem['mc']) {\r\n            rElem = this.tRElem['mc'];\r\n        }\r\n        return rElem;\r\n    };\r\n    /**\r\n     * [BUG20180417] 端点拖动以后报错： Uncaught TypeError: Cannot read property 'nextSibling' of null\r\n     * 选中\r\n     */\r\n    NodeAbstract.prototype.select = function () {\r\n        var selMk = false, bAttr = this.getBBox(), attr = bAttr.attr, ps = bAttr.ps, x = attr.x, y = attr.y, width = attr.width, height = attr.height, paper = this.paper, ist;\r\n        this.removeBox();\r\n        this.isSelEd = true;\r\n        this.tRElem['box'] = paper.rect(x, y, width, height)\r\n            .attr({\r\n            'stroke': '#0033FF',\r\n            'stroke-width': '0.8'\r\n        });\r\n        for (var key in ps) {\r\n            var _a = ps[key], x_1 = _a.x, y_1 = _a.y;\r\n            this.tRElem['__p' + key] = paper.circle(x_1, y_1, 2)\r\n                .attr('fill', '#000000')\r\n                .data('pcode', this.code)\r\n                .data('posi', key);\r\n            this.onCreateBoxPnt(this.tRElem['__p' + key]);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 移除历史边框\r\n     */\r\n    NodeAbstract.prototype.removeBox = function () {\r\n        if (!this.tRElem) {\r\n            this.tRElem = {};\r\n        }\r\n        // 移除原边框，重新获取\r\n        if (this.tRElem.box) {\r\n            this.tRElem.box.remove();\r\n            delete this.tRElem.box;\r\n        }\r\n        for (var key in this.tRElem) {\r\n            if (key.indexOf('__p') > -1) {\r\n                this.tRElem[key].remove();\r\n                delete this.tRElem[key];\r\n            }\r\n        }\r\n        this.isSelEd = false;\r\n        return this;\r\n    };\r\n    /**\r\n     * 放大\r\n     * @param {number} rate 比例 0.05 [0-1]\r\n     */\r\n    NodeAbstract.prototype.zoomOut = function (rate) {\r\n        rate = rate ? rate : 0.05;\r\n        var _a = this, c = _a.c, opt = _a.opt;\r\n        opt.w = opt.w * (1 + rate);\r\n        opt.h = opt.h * (1 + rate);\r\n        this.updAttr({\r\n            w: opt.w,\r\n            h: opt.h\r\n        });\r\n        this.select();\r\n        return this;\r\n    };\r\n    /**\r\n     * 首先\r\n     * @param {number} rate 比例 0.05 [0-1]\r\n     */\r\n    NodeAbstract.prototype.zoomIn = function (rate) {\r\n        rate = rate ? rate : 0.05;\r\n        var _a = this, c = _a.c, opt = _a.opt;\r\n        opt.w = opt.w * (1 - rate);\r\n        opt.h = opt.h * (1 - rate);\r\n        this.updAttr({\r\n            w: opt.w,\r\n            h: opt.h\r\n        });\r\n        this.select();\r\n        return this;\r\n    };\r\n    /**\r\n     * 方向移动\r\n     * @param {number} rate 比例 0.05 [0-1]\r\n     */\r\n    NodeAbstract.prototype.move = function (type, rate) {\r\n        rate = rate ? rate : 0.05;\r\n        var opt = this.opt, uOpt;\r\n        type = type ? type.toUpperCase() : type;\r\n        switch (type) {\r\n            case 'T':\r\n                uOpt = { cy: opt.cy * (1 - rate) };\r\n                break;\r\n            case 'B':\r\n                uOpt = { cy: opt.cy * (1 + rate) };\r\n                break;\r\n            case 'L':\r\n                uOpt = { cx: opt.cx * (1 - rate) };\r\n                break;\r\n            case 'R':\r\n                uOpt = { cx: opt.cx * (1 + rate) };\r\n                break;\r\n        }\r\n        if (uOpt) {\r\n            this.updAttr(uOpt);\r\n            this.select();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 上移\r\n     * @param {number} rate 比例 0.05 [0-1]\r\n     */\r\n    NodeAbstract.prototype.move2T = function (rate) {\r\n        this.move('T', rate);\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     * 下移\r\n     * @param {number} rate 比例 0.05 [0-1]\r\n     */\r\n    NodeAbstract.prototype.move2B = function (rate) {\r\n        this.move('B', rate);\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     * 下移\r\n     * @param {number} rate 比例 0.05 [0-1]\r\n     */\r\n    NodeAbstract.prototype.move2L = function (rate) {\r\n        this.move('L', rate);\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     * 下移\r\n     * @param {number} rate 比例 0.05 [0-1]\r\n     */\r\n    NodeAbstract.prototype.move2R = function (rate) {\r\n        this.move('R', rate);\r\n        return this;\r\n    };\r\n    /**\r\n     * 底色\r\n     * @param {string} type 空便是默认底色，\r\n     */\r\n    NodeAbstract.prototype.background = function (type) {\r\n        var _this = this;\r\n        if ('object' == typeof type) {\r\n            _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].each(type, function (i, t) {\r\n                _this.background(t);\r\n            });\r\n            return;\r\n        }\r\n        if (type) {\r\n            type = type.toLowerCase();\r\n        }\r\n        switch (type) {\r\n            case 'magn': // 磁化背景色\r\n                this.c.attr('fill', this.opt.bkgMagnetic);\r\n                break;\r\n            case 'text':\r\n                if (!this.opt.bkgTxt) {\r\n                    this.opt.bkgTxt = '#000000';\r\n                }\r\n                if (this.label) {\r\n                    this.label.attr('fill', this.opt.bkgTxt);\r\n                }\r\n                break;\r\n            case 'node':\r\n            default:\r\n                this.c.attr('fill', this.opt.bkg);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 删除节点中的临时节点\r\n     * @param key\r\n     */\r\n    NodeAbstract.prototype.clearTmpElem = function (key) {\r\n        var _this = this;\r\n        if (key) {\r\n            var tArr_1 = [];\r\n            if ('object' == typeof key) {\r\n                tArr_1 = key;\r\n            }\r\n            else {\r\n                tArr_1 = [key];\r\n            }\r\n            _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].each(this.tRElem, function (k, elem) {\r\n                if (_util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].inArray(k, tArr_1) > -1) {\r\n                    elem.remove();\r\n                    delete _this.tRElem[k];\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].each(this.tRElem, function (k, elem) {\r\n                elem.remove();\r\n                delete _this.tRElem[k];\r\n            });\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 事件接口 [生成边框先关的点] 用于连线\r\n     */\r\n    NodeAbstract.prototype.onCreateBoxPnt = function (rElem) { };\r\n    /**\r\n     * 尺寸大小更新\r\n     * @memberof NodeAbstract\r\n     */\r\n    NodeAbstract.prototype.onSize = function () { };\r\n    return NodeAbstract;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeAbstract);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeAbstract.ts?");

/***/ }),

/***/ "./src/node/NodeAudit.ts":
/*!*******************************!*\
  !*** ./src/node/NodeAudit.ts ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\n/**\r\n * 2018年3月26日 星期一\r\n * 审核节点\r\n */\r\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar NodeAudit = /** @class */ (function (_super) {\r\n    __extends(NodeAudit, _super);\r\n    function NodeAudit() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeAudit.prototype._onInit = function () {\r\n        this.NodeType = 'audit';\r\n        this.xRate = 0.20;\r\n    };\r\n    NodeAudit.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || '#88EEEA';\r\n        var pQue = this.opt2Attr(), nOpt = this.opt;\r\n        this.c = this.paper.path(this._ps2Path(pQue, true));\r\n        this.c.attr('fill', nOpt.bkg);\r\n        // 文字\r\n        if (nOpt.text) {\r\n            var _a = this._getTextPnt(), x = _a.x, y = _a.y;\r\n            this.label = this.paper.text(x, y, nOpt.text);\r\n            this.sets = this.paper.set();\r\n            this.sets.push(this.c, this.label);\r\n        }\r\n    };\r\n    /**\r\n     * 选项与节点属性的映射\r\n     * @param {obejct|null} opt  选项属性\r\n     * @returns {array} 选项表\r\n     */\r\n    NodeAudit.prototype.opt2Attr = function (opt) {\r\n        var nopt = opt ? opt : this.opt, cx = nopt.cx, cy = nopt.cy, w = nopt.w, h = nopt.h, xRate = this.xRate;\r\n        return [\r\n            {\r\n                x: cx - w / 2,\r\n                y: cy - h / 2\r\n            },\r\n            {\r\n                x: (cx + w / 2) + (w * xRate),\r\n                y: cy - h / 2\r\n            },\r\n            {\r\n                x: cx + w / 2,\r\n                y: cy + h / 2\r\n            },\r\n            {\r\n                x: (cx - w / 2) - (w * xRate),\r\n                y: cy + h / 2\r\n            }\r\n        ];\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeAudit.prototype.updAttr = function (nOpt) {\r\n        this._updAttr(nOpt);\r\n        var opt = this.opt2Attr();\r\n        this.c.attr('path', this._ps2PathAttr(opt, true));\r\n        this.updTextAttr(nOpt.text); // 文字        \r\n        this.onSize();\r\n        return this;\r\n    };\r\n    return NodeAudit;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeAudit);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeAudit.ts?");

/***/ }),

/***/ "./src/node/NodeBegin.ts":
/*!*******************************!*\
  !*** ./src/node/NodeBegin.ts ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\n/**\r\n * 2018年3月26日 星期一\r\n * 开始\r\n */\r\n///<reference path=\"../../index.d.ts\"/>\r\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar NodeBegin = /** @class */ (function (_super) {\r\n    __extends(NodeBegin, _super);\r\n    function NodeBegin() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeBegin.prototype._onInit = function () {\r\n        this.NodeType = 'begin';\r\n    };\r\n    /**\r\n     * 生成器处理事件\r\n     */\r\n    NodeBegin.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || '#851E07';\r\n        var opt = this.opt;\r\n        this.c = this.paper.ellipse(opt.cx, opt.cy, opt.w / 2, opt.h / 2);\r\n        this.c.attr('fill', opt.bkg);\r\n        // 文字\r\n        if (opt.text) {\r\n            var _a = this._getTextPnt(), x = _a.x, y = _a.y;\r\n            this.label = this.paper.text(x, y, opt.text);\r\n            this.sets = this.paper.set();\r\n            this.sets.push(this.c, this.label);\r\n        }\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeBegin.prototype.updAttr = function (nOpt) {\r\n        var opt = this._updAttr(nOpt)\r\n            .opt;\r\n        this.c.attr({\r\n            cx: opt.cx,\r\n            cy: opt.cy,\r\n            rx: opt.w / 2,\r\n            ry: opt.h / 2\r\n        });\r\n        this.updTextAttr(nOpt.text); // 文字\r\n        this.onSize();\r\n        return this;\r\n    };\r\n    return NodeBegin;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeBegin);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeBegin.ts?");

/***/ }),

/***/ "./src/node/NodeCond.ts":
/*!******************************!*\
  !*** ./src/node/NodeCond.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\n/**\r\n * 2018年3月26日 星期一\r\n * 条件判断节点\r\n */\r\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar NodeCond = /** @class */ (function (_super) {\r\n    __extends(NodeCond, _super);\r\n    function NodeCond() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeCond.prototype._onInit = function () {\r\n        this.NodeType = 'cond';\r\n    };\r\n    NodeCond.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || '#88EEEA';\r\n        var pQue = this.opt2Attr(), opt = this.opt;\r\n        this.c = this.paper.path(this._ps2Path(pQue, true));\r\n        this.c.attr('fill', opt.bkg);\r\n        // 文字\r\n        if (opt.text) {\r\n            var _a = this._getTextPnt(), x = _a.x, y = _a.y;\r\n            this.label = this.paper.text(x, y, opt.text);\r\n            this.sets = this.paper.set();\r\n            this.sets.push(this.c, this.label);\r\n        }\r\n    };\r\n    /**\r\n     * 选项与节点属性的映射\r\n     * @param {obejct|null} opt  选项属性\r\n     * @returns {array} 选项表\r\n     */\r\n    NodeCond.prototype.opt2Attr = function (opt) {\r\n        var nOpt = opt ? opt : this.opt, cx = nOpt.cx, cy = nOpt.cy, w = nOpt.w, h = nOpt.h;\r\n        return [\r\n            {\r\n                x: cx,\r\n                y: cy - h / 2\r\n            },\r\n            {\r\n                x: cx + w / 2,\r\n                y: cy\r\n            },\r\n            {\r\n                x: cx,\r\n                y: cy + h / 2\r\n            },\r\n            {\r\n                x: cx - w / 2,\r\n                y: cy\r\n            }\r\n        ];\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeCond.prototype.updAttr = function (nOpt) {\r\n        this._updAttr(nOpt);\r\n        var opt = this.opt2Attr();\r\n        this.c.attr('path', this._ps2PathAttr(opt, true));\r\n        this.updTextAttr(nOpt.text); // 文字\r\n        this.onSize();\r\n        return this;\r\n    };\r\n    return NodeCond;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeCond);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeCond.ts?");

/***/ }),

/***/ "./src/node/NodeEnd.ts":
/*!*****************************!*\
  !*** ./src/node/NodeEnd.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * 2018年3月26日 星期一\r\n * 结束\r\n */\r\n\r\nvar NodeEnd = /** @class */ (function (_super) {\r\n    __extends(NodeEnd, _super);\r\n    function NodeEnd() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeEnd.prototype._onInit = function () {\r\n        this.NodeType = 'end';\r\n    };\r\n    /**\r\n     * 生成器处理事件\r\n     */\r\n    NodeEnd.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || '#2EF25F';\r\n        var opt = this.opt;\r\n        this.c = this.paper.ellipse(opt.cx, opt.cy, opt.w / 2, opt.h / 2);\r\n        this.c.attr('fill', this.opt.bkg);\r\n        // 文字\r\n        if (opt.text) {\r\n            var _a = this._getTextPnt(), x = _a.x, y = _a.y;\r\n            this.label = this.paper.text(x, y, opt.text);\r\n            this.sets = this.paper.set();\r\n            this.sets.push(this.c, this.label);\r\n        }\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeEnd.prototype.updAttr = function (nOpt) {\r\n        var opt = this._updAttr(nOpt)\r\n            .opt;\r\n        this.c.attr({\r\n            cx: opt.cx,\r\n            cy: opt.cy,\r\n            rx: opt.w / 2,\r\n            ry: opt.h / 2\r\n        });\r\n        this.updTextAttr(nOpt.text); // 文字\r\n        this.onSize();\r\n        return this;\r\n    };\r\n    return NodeEnd;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeEnd);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeEnd.ts?");

/***/ }),

/***/ "./src/node/NodeLn.ts":
/*!****************************!*\
  !*** ./src/node/NodeLn.ts ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ \"./src/util.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * 2018年3月26日 星期一\r\n * 直线\r\n */\r\n\r\n\r\nvar NodeLn = /** @class */ (function (_super) {\r\n    __extends(NodeLn, _super);\r\n    function NodeLn() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeLn.prototype._onInit = function () {\r\n        this.NodeType = 'ln';\r\n        // 箭头最大长度\r\n        this.data('maxR', 5);\r\n    };\r\n    NodeLn.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || 'rgb(3, 84, 41)';\r\n        var opt = this.opt, bkg = opt.bkg;\r\n        this.c = this.paper.path(this._ps2Path(this.opt2Attr()))\r\n            .attr('stroke-width', '2px')\r\n            .attr('fill', this.opt.bkg)\r\n            .attr('stroke', this.opt.bkg);\r\n    };\r\n    /**\r\n     * 生成器 nOpt: {P1: rSu.P, P2: rSu.P, r?: number}\r\n     */\r\n    NodeLn.prototype.opt2Attr = function (nOpt) {\r\n        var opt = nOpt ? nOpt : this.opt, P1 = opt.P1, P2 = opt.P2, r = opt.r || this.getLen() * 0.2, maxR = this.data('maxR');\r\n        if (r > maxR) {\r\n            r = maxR;\r\n        }\r\n        var atan = Math.atan2(P1.y - P2.y, P2.x - P1.x) * (180 / Math.PI);\r\n        var centerX = P2.x - r * Math.cos(atan * (Math.PI / 180));\r\n        var centerY = P2.y + r * Math.sin(atan * (Math.PI / 180));\r\n        var x2 = centerX + r * Math.cos((atan + 120) * (Math.PI / 180));\r\n        var y2 = centerY - r * Math.sin((atan + 120) * (Math.PI / 180));\r\n        var x3 = centerX + r * Math.cos((atan + 240) * (Math.PI / 180));\r\n        var y3 = centerY - r * Math.sin((atan + 240) * (Math.PI / 180));\r\n        return [\r\n            P1,\r\n            P2,\r\n            { x: x2, y: y2 },\r\n            { x: x3, y: y3 },\r\n            P2\r\n        ];\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeLn.prototype.updAttr = function (nOpt) {\r\n        this._updAttr(nOpt);\r\n        this.c.attr('path', this._ps2PathAttr(this.opt2Attr()));\r\n        return this;\r\n    };\r\n    /**\r\n     * 获取两点间的距离\r\n     */\r\n    NodeLn.prototype.getLen = function (nOpt) {\r\n        var opt = nOpt ? nOpt : this.opt, P1 = opt.P1, P2 = opt.P2;\r\n        return this.getPLen(P1, P2);\r\n    };\r\n    /**\r\n     * 特殊的连接方式\r\n     */\r\n    NodeLn.prototype.select = function () {\r\n        var _this = this;\r\n        var fP = this.getFocusPoint();\r\n        this.removeBox();\r\n        this.isSelEd = true;\r\n        _util__WEBPACK_IMPORTED_MODULE_1__[\"Util\"].each(fP, function (k, p) {\r\n            var tPIst = _this.paper.circle(p.x, p.y, 3)\r\n                .attr('fill', _this.feature('focusPBkg', null, '#990000'))\r\n                .data('pcode', _this.code)\r\n                .data('posi', k);\r\n            _this.tRElem['__p' + k] = tPIst;\r\n            _this.onCreateBoxPnt(_this.tRElem['__p' + k]);\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * 获取聚焦点\r\n     * f/m/t\r\n     */\r\n    NodeLn.prototype.getFocusPoint = function () {\r\n        var _a = this.opt, P1 = _a.P1, P2 = _a.P2, len = this.getPLen(P1, P2), tP = this.c.getPointAtLength(len / 2);\r\n        return {\r\n            f: P1,\r\n            m: { x: tP.x, y: tP.y },\r\n            t: P2\r\n        };\r\n    };\r\n    return NodeLn;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeLn);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeLn.ts?");

/***/ }),

/***/ "./src/node/NodeLnPoly.ts":
/*!********************************!*\
  !*** ./src/node/NodeLnPoly.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\n/* harmony import */ var _NodeUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NodeUtil */ \"./src/node/NodeUtil.ts\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ \"./src/util.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * 2018年3月26日 星期一\r\n * 折线\r\n */\r\n\r\n\r\n\r\nvar NodeLnPoly = /** @class */ (function (_super) {\r\n    __extends(NodeLnPoly, _super);\r\n    function NodeLnPoly() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeLnPoly.prototype._onInit = function () {\r\n        this.NodeType = 'ln_poly';\r\n    };\r\n    NodeLnPoly.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || 'rgb(3, 84, 41)';\r\n        var opt = this.opt, bkg = opt.bkg, _a = this.opt2Attr(), pQue = _a.pQue, arrowPs = _a.arrowPs;\r\n        var sWd = '2px';\r\n        this.c = this.paper.path(this._ps2Path(pQue))\r\n            .attr('stroke-width', sWd)\r\n            .attr('stroke', this.opt.bkg);\r\n        // console.log(pQue, arrowPs)\r\n        this.inlineEle = this.paper.path(this._ps2Path(_util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].jsonValues(arrowPs)));\r\n        this.inlineEle\r\n            .attr('fill', this.opt.bkg)\r\n            .attr('stroke', this.opt.bkg)\r\n            .attr('stroke-width', sWd);\r\n    };\r\n    /**\r\n     * 选项转属性\r\n     * @param nOpt\r\n     */\r\n    NodeLnPoly.prototype.opt2Attr = function (nOpt) {\r\n        var pQue = [];\r\n        var opt = nOpt ? nOpt : this.opt, P1 = opt.P1, P2 = opt.P2, l = this.getLen(), rX = opt.rX || 0.35, r = opt.r || (l * (1 - rX) * 0.2), MPs = opt.MPs || [];\r\n        pQue = [P1]; // 起点\r\n        // 中间点计算\r\n        if (MPs.length > 0) { // 使用默认的点列\r\n            // 起点与第一个相邻点非折线时，纠正\r\n            if (MPs[0].x != P1.x && MPs[0].y != P1.y) {\r\n                var p1Ng = this.getMiddP(P1, MPs[0]);\r\n                MPs = _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].MergeArr([p1Ng], MPs);\r\n            }\r\n            // 起点与第一个相邻点非折线时，纠正\r\n            var last = MPs.length - 1;\r\n            if (MPs[last].x != P2.x && MPs[last].y != P2.y) {\r\n                var p2Ng = this.getMiddP(MPs[last], P2);\r\n                MPs = _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].MergeArr(MPs, [p2Ng]);\r\n            }\r\n            pQue = pQue.concat(MPs);\r\n            this.opt.MPs = MPs;\r\n        }\r\n        else {\r\n            var x1 = P1.x, y1 = P1.y, x2 = P2.x, y2 = P2.y;\r\n            var delMps = this.getMiddP(P1, P2);\r\n            if (delMps) {\r\n                MPs.push(delMps);\r\n                pQue.push(delMps);\r\n                this.opt.MPs = MPs;\r\n            }\r\n        }\r\n        pQue.push(P2); // 终点\r\n        // 箭头坐标\r\n        var arrowPs = {};\r\n        if (pQue.length > 1) {\r\n            var pQLen = pQue.length - 1;\r\n            arrowPs = _NodeUtil__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ps2arrow(pQue[pQLen - 1], pQue[pQLen], r);\r\n        }\r\n        return { pQue: pQue, arrowPs: arrowPs };\r\n    };\r\n    /**\r\n     * 获取中间点\r\n     * @param P0\r\n     * @param P1\r\n     */\r\n    NodeLnPoly.prototype.getMiddP = function (P0, P1) {\r\n        var p;\r\n        if (P0.x != P1.x && P0.y != P1.y) {\r\n            p = { x: P0.x, y: P1.y };\r\n        }\r\n        return p;\r\n    };\r\n    /**\r\n     * 获取两点间的距离\r\n     */\r\n    NodeLnPoly.prototype.getLen = function (nOpt) {\r\n        var opt = nOpt ? nOpt : this.opt, P1 = opt.P1, P2 = opt.P2;\r\n        return this.getPLen(P1, P2);\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeLnPoly.prototype.updAttr = function (nOpt) {\r\n        this._updAttr(nOpt);\r\n        var _a = this.opt2Attr(), pQue = _a.pQue, arrowPs = _a.arrowPs;\r\n        this.c.attr('path', this._ps2PathAttr(pQue));\r\n        this.inlineEle.attr('path', this._ps2PathAttr(_util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].jsonValues(arrowPs)));\r\n        return this;\r\n    };\r\n    /**\r\n     * 特殊的连接方式\r\n     */\r\n    NodeLnPoly.prototype.select = function () {\r\n        var _this = this;\r\n        var fP = this.getFocusPoint();\r\n        this.removeBox();\r\n        this.isSelEd = true;\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(fP, function (k, p) {\r\n            var tPIst = _this.paper.circle(p.x, p.y, 3)\r\n                .attr('fill', _this.feature('focusPBkg', null, '#990000'))\r\n                .data('pcode', _this.code)\r\n                .data('posi', k);\r\n            _this.tRElem['__p' + k] = tPIst;\r\n            _this.onCreateBoxPnt(_this.tRElem['__p' + k]);\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * 获取聚焦点\r\n     * f/m/t\r\n     */\r\n    NodeLnPoly.prototype.getFocusPoint = function () {\r\n        this._mpsMerge();\r\n        var _a = this.opt, P1 = _a.P1, P2 = _a.P2, MPs = this.opt.MPs || [];\r\n        var psMap = {\r\n            f: P1\r\n        };\r\n        // 个数统计\r\n        var num = 0;\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(MPs, function (k, p) {\r\n            var kStr = 'm' + k;\r\n            psMap[kStr] = p;\r\n            num = k;\r\n        });\r\n        psMap.t = P2;\r\n        // 中间点        \r\n        var psValue = _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].jsonValues(psMap), psCtt = psValue.length, // 节点统计个数\r\n        fPsDick = {}; // 聚焦点坐标字典\r\n        var fIdx = -1; // 聚焦点索引\r\n        for (var i = 0; i < psCtt - 1; i++) {\r\n            num += 1;\r\n            var kStr = 'm' + num, pV1 = psValue[i], pV2 = psValue[i + 1];\r\n            fIdx += 1;\r\n            fPsDick['f' + fIdx] = pV1;\r\n            fIdx += 1; // 中间点 ~ 中点坐标公式\r\n            fPsDick['f' + fIdx] = _NodeUtil__WEBPACK_IMPORTED_MODULE_1__[\"default\"].middP(pV1, pV2);\r\n        }\r\n        fIdx += 1;\r\n        fPsDick['f' + fIdx] = psValue[psCtt - 1];\r\n        return fPsDick;\r\n    };\r\n    /**\r\n     * 2018年5月12日 星期六: 左右相等检测法\r\n     * 中间点合并\r\n     */\r\n    NodeLnPoly.prototype._mpsMerge = function () {\r\n        var opt = this.opt, MPs = opt.MPs, nMPs = [], dt = 1;\r\n        var MPsLen = MPs.length;\r\n        _util__WEBPACK_IMPORTED_MODULE_2__[\"Util\"].each(MPs, function (i, p) {\r\n            var afterP = i == 0 ? opt.P1 : MPs[i - 1];\r\n            var nextP = i == MPsLen - 1 ? opt.P2 : MPs[i + 1];\r\n            // 左右相等检测是否坐标同直线\r\n            if ((Math.abs(afterP.x - p.x) <= dt && Math.abs(nextP.x - p.x) <= dt) ||\r\n                (Math.abs(afterP.y - p.y) <= dt && Math.abs(nextP.y - p.y) <= dt)) {\r\n                return;\r\n            }\r\n            nMPs.push(p);\r\n        });\r\n        this.updAttr({\r\n            MPs: nMPs\r\n        });\r\n    };\r\n    /**\r\n     * 端点移动\r\n     * @param {rSu.P} p 移动的节点\r\n     * @param {bool} isEnd 是否为终点\r\n     */\r\n    NodeLnPoly.prototype.mvEndPoint = function (p, isEnd) {\r\n        var tP;\r\n        var pathArr = this.c.attr('path'), opt = this.opt;\r\n        if (isEnd) { // 终点\r\n            var pA0 = pathArr[pathArr.length - 2], p0 = {\r\n                x: pA0[1],\r\n                y: pA0[2]\r\n            };\r\n            tP = this.getMiddP(p0, opt.P2);\r\n            if (tP) {\r\n                opt.MPs = opt.MPs ? opt.MPs : [];\r\n                if (opt.MPs.length > 0) {\r\n                    opt.MPs[opt.MPs.length - 1] = tP;\r\n                }\r\n            }\r\n            else {\r\n                opt.MPs = [];\r\n            }\r\n            opt.P2 = p;\r\n        }\r\n        else { // 起点\r\n            var pA0 = pathArr[1], p0 = {\r\n                x: pA0[1],\r\n                y: pA0[2]\r\n            };\r\n            tP = this.getMiddP(opt.P1, p0);\r\n            if (tP) {\r\n                opt.MPs = opt.MPs ? opt.MPs : [];\r\n                if (opt.MPs.length > 0) {\r\n                    opt.MPs[0] = tP;\r\n                }\r\n            }\r\n            else {\r\n                opt.MPs = [];\r\n            }\r\n            opt.P1 = p;\r\n        }\r\n        this.updAttr(opt);\r\n    };\r\n    return NodeLnPoly;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeLnPoly);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeLnPoly.ts?");

/***/ }),

/***/ "./src/node/NodeMerge.ts":
/*!*******************************!*\
  !*** ./src/node/NodeMerge.ts ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\n/**\r\n * 2018年3月26日 星期一\r\n * 合并\r\n */\r\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar NodeMerge = /** @class */ (function (_super) {\r\n    __extends(NodeMerge, _super);\r\n    function NodeMerge() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeMerge.prototype._onInit = function () {\r\n        this.NodeType = 'merge';\r\n        this.xRate = 0.20;\r\n    };\r\n    NodeMerge.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || '#88EEEA';\r\n        var attrs = this.opt2Attr(), opt = this.opt, bkg = opt.bkg;\r\n        this.c = this.paper.path(this._ps2Path(attrs.cAttr, true));\r\n        this.c.attr('fill', bkg);\r\n        this.inlinesEle = [\r\n            this.paper.path(this._ps2Path(attrs.vLine)),\r\n            this.paper.path(this._ps2Path(attrs.hLine))\r\n        ];\r\n    };\r\n    /**\r\n     * 通过选项映射到节点属性\r\n     */\r\n    NodeMerge.prototype.opt2Attr = function (nOpt) {\r\n        var opt = nOpt ? nOpt : this.opt, x = opt.cx - opt.w / 2, y = opt.cy - opt.h / 2, w = opt.w, h = opt.h, xRate = this.xRate, rW = w * (1 - xRate * 2); // 内矩形宽度\r\n        return {\r\n            cAttr: [\r\n                {\r\n                    x: x - rW / 2, y: y - h / 2\r\n                },\r\n                {\r\n                    x: x + rW / 2, y: y - h / 2\r\n                },\r\n                {\r\n                    x: x + w / 2, y: y\r\n                },\r\n                {\r\n                    x: x + rW / 2, y: y + h / 2\r\n                },\r\n                {\r\n                    x: x - rW / 2, y: y + h / 2\r\n                },\r\n                {\r\n                    x: x - w / 2, y: y\r\n                }\r\n            ],\r\n            vLine: [\r\n                { x: x, y: y - h / 2 * 0.80 },\r\n                { x: x, y: y + h / 2 * 0.80 }\r\n            ],\r\n            hLine: [\r\n                { x: x - rW / 2 - rW * 0.1, y: y },\r\n                { x: x + rW / 2 + rW * 0.1, y: y }\r\n            ]\r\n        };\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeMerge.prototype.updAttr = function (nOpt) {\r\n        this._updAttr(nOpt);\r\n        var _a = this.opt2Attr(), cAttr = _a.cAttr, vLine = _a.vLine, hLine = _a.hLine;\r\n        this.c.attr('path', this._ps2PathAttr(cAttr, true));\r\n        this.inlinesEle[0].attr('path', this._ps2PathAttr(vLine));\r\n        this.inlinesEle[1].attr('path', this._ps2PathAttr(hLine));\r\n        this.onSize();\r\n        return this;\r\n    };\r\n    return NodeMerge;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeMerge);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeMerge.ts?");

/***/ }),

/***/ "./src/node/NodeParallel.ts":
/*!**********************************!*\
  !*** ./src/node/NodeParallel.ts ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * 2018年3月26日 星期一\r\n * 并行\r\n */\r\n\r\nvar NodeParallel = /** @class */ (function (_super) {\r\n    __extends(NodeParallel, _super);\r\n    function NodeParallel() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeParallel.prototype._onInit = function () {\r\n        this.NodeType = 'parallel';\r\n        this.xRate = 0.20;\r\n    };\r\n    NodeParallel.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || '#88EEEA';\r\n        var attrs = this.opt2Attr(), opt = this.opt, bkg = opt.bkg;\r\n        this.c = this.paper.path(this._ps2Path(attrs.cAttr, true));\r\n        this.c.attr('fill', bkg);\r\n        this.inlineEle = this.paper.path(this._ps2Path(attrs.inLine));\r\n    };\r\n    /**\r\n     * 通过选项映射到节点属性\r\n     */\r\n    NodeParallel.prototype.opt2Attr = function (nOpt) {\r\n        var opt = nOpt ? nOpt : this.opt, x = opt.cx - opt.w / 2, y = opt.cy - opt.h / 2, w = opt.w, h = opt.h, xRate = this.xRate, rW = w * (1 - xRate * 2); // 内矩形宽度\r\n        return {\r\n            cAttr: [\r\n                {\r\n                    x: x - rW / 2, y: y - h / 2\r\n                },\r\n                {\r\n                    x: x + rW / 2, y: y - h / 2\r\n                },\r\n                {\r\n                    x: x + w / 2, y: y\r\n                },\r\n                {\r\n                    x: x + rW / 2, y: y + h / 2\r\n                },\r\n                {\r\n                    x: x - rW / 2, y: y + h / 2\r\n                },\r\n                {\r\n                    x: x - w / 2, y: y\r\n                }\r\n            ],\r\n            inLine: [\r\n                { x: x - rW / 2 - rW * 0.1, y: y },\r\n                { x: x + rW / 2 + rW * 0.1, y: y }\r\n            ]\r\n        };\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeParallel.prototype.updAttr = function (nOpt) {\r\n        this._updAttr(nOpt);\r\n        var _a = this.opt2Attr(), cAttr = _a.cAttr, inLine = _a.inLine;\r\n        this.c.attr('path', this._ps2PathAttr(cAttr, true));\r\n        this.inlineEle.attr('path', this._ps2PathAttr(inLine));\r\n        this.onSize();\r\n        return this;\r\n    };\r\n    return NodeParallel;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeParallel);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeParallel.ts?");

/***/ }),

/***/ "./src/node/NodeSign.ts":
/*!******************************!*\
  !*** ./src/node/NodeSign.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\n/**\r\n * 2018年3月26日 星期一\r\n * 会签\r\n */\r\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar NodeSign = /** @class */ (function (_super) {\r\n    __extends(NodeSign, _super);\r\n    function NodeSign() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeSign.prototype._onInit = function () {\r\n        this.NodeType = 'sign';\r\n        this.xRate = 0.20;\r\n    };\r\n    NodeSign.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || '#88EEEA';\r\n        var pQue = this.opt2Attr(), opt = this.opt, bkg = opt.bkg;\r\n        this.c = this.paper.path(this._ps2Path(pQue, true));\r\n        this.c.attr('fill', bkg);\r\n        // 文字\r\n        if (opt.text) {\r\n            var _a = this._getTextPnt(), x = _a.x, y = _a.y;\r\n            this.label = this.paper.text(x, y, opt.text);\r\n            this.sets = this.paper.set();\r\n            this.sets.push(this.c, this.label);\r\n        }\r\n    };\r\n    /**\r\n     * 选项与节点属性的映射\r\n     * @param {obejct|null} opt  选项属性\r\n     * @returns {array} 选项表\r\n     */\r\n    NodeSign.prototype.opt2Attr = function (opt) {\r\n        var nopt = opt ? opt : this.opt, cx = nopt.cx, cy = nopt.cy, w = nopt.w, h = nopt.h, xRate = this.xRate;\r\n        return [\r\n            {\r\n                x: cx - w / 2 - w * xRate,\r\n                y: cy - h / 2\r\n            },\r\n            {\r\n                x: (cx + w / 2) + (w * xRate),\r\n                y: cy - h / 2\r\n            },\r\n            {\r\n                x: cx + w / 2,\r\n                y: cy + h / 2\r\n            },\r\n            {\r\n                x: cx - w / 2,\r\n                y: cy + h / 2\r\n            }\r\n        ];\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeSign.prototype.updAttr = function (nOpt) {\r\n        this._updAttr(nOpt);\r\n        var opt = this.opt2Attr();\r\n        this.c.attr('path', this._ps2PathAttr(opt, true));\r\n        this.updTextAttr(nOpt.text); // 文字\r\n        this.onSize();\r\n        return this;\r\n    };\r\n    return NodeSign;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeSign);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeSign.ts?");

/***/ }),

/***/ "./src/node/NodeSubFlow.ts":
/*!*********************************!*\
  !*** ./src/node/NodeSubFlow.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\n/**\r\n * 2018年3月26日 星期一\r\n * 子流程\r\n */\r\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar NodeSubFlow = /** @class */ (function (_super) {\r\n    __extends(NodeSubFlow, _super);\r\n    function NodeSubFlow() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeSubFlow.prototype._onInit = function () {\r\n        this.NodeType = 'sub_flow';\r\n        this.xRate = 0.15;\r\n    };\r\n    /**\r\n     * 生成器处理事件\r\n     */\r\n    NodeSubFlow.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || '#88EEEA';\r\n        var _a = this.opt2Attr(), cAttr = _a.cAttr, lLine = _a.lLine, rLine = _a.rLine, opt = this.opt, bkg = opt.bkg;\r\n        this.c = this.paper.rect(cAttr.x, cAttr.y, cAttr.w, cAttr.h);\r\n        this.c.attr('fill', bkg);\r\n        this.inlinesEle = [\r\n            this.paper.path(this._ps2Path(lLine)),\r\n            this.paper.path(this._ps2Path(rLine))\r\n        ];\r\n        // 文字\r\n        if (opt.text) {\r\n            var _b = this._getTextPnt(), x = _b.x, y = _b.y;\r\n            this.label = this.paper.text(x, y, opt.text);\r\n            this.sets = this.paper.set();\r\n            this.sets.push(this.c, this.label);\r\n        }\r\n    };\r\n    /**\r\n     * 通过选项映射到节点属性\r\n     */\r\n    NodeSubFlow.prototype.opt2Attr = function (nOpt) {\r\n        var opt = nOpt ? nOpt : this.opt, x = opt.cx - opt.w / 2, y = opt.cy - opt.h / 2, w = opt.w, h = opt.h, xRate = this.xRate;\r\n        return {\r\n            cAttr: {\r\n                x: x, y: y, w: w, h: h\r\n            },\r\n            lLine: [\r\n                { x: x + w * xRate, y: y },\r\n                { x: x + w * xRate, y: y + h }\r\n            ],\r\n            rLine: [\r\n                { x: x + w - w * xRate, y: y },\r\n                { x: x + w - w * xRate, y: y + h }\r\n            ]\r\n        };\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeSubFlow.prototype.updAttr = function (nOpt) {\r\n        this._updAttr(nOpt);\r\n        var _a = this.opt2Attr(), cAttr = _a.cAttr, lLine = _a.lLine, rLine = _a.rLine;\r\n        this.c.attr({\r\n            x: cAttr.x, y: cAttr.y, width: cAttr.w, height: cAttr.h\r\n        });\r\n        this.inlinesEle[0].attr('path', this._ps2PathAttr(lLine));\r\n        this.inlinesEle[1].attr('path', this._ps2PathAttr(rLine));\r\n        this.updTextAttr(nOpt.text); // 文字\r\n        this.onSize();\r\n        return this;\r\n    };\r\n    return NodeSubFlow;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeSubFlow);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeSubFlow.ts?");

/***/ }),

/***/ "./src/node/NodeTask.ts":
/*!******************************!*\
  !*** ./src/node/NodeTask.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\n/**\r\n * 2018年3月26日 星期一\r\n * 任务节点\r\n */\r\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar NodeTask = /** @class */ (function (_super) {\r\n    __extends(NodeTask, _super);\r\n    function NodeTask() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeTask.prototype._onInit = function () {\r\n        this.NodeType = 'task';\r\n    };\r\n    /**\r\n     * 生成器处理事件\r\n     */\r\n    NodeTask.prototype._whenCreatorEvt = function () {\r\n        this.opt.bkg = this.opt.bkg || '#88EEEA';\r\n        var attr = this.opt2Attr(), opt = this.opt, bkg = opt.bkg;\r\n        this.c = this.paper.rect(attr.x, attr.y, attr.w, attr.h);\r\n        this.c.attr('fill', bkg);\r\n        // 文字\r\n        if (opt.text) {\r\n            var _a = this._getTextPnt(), x = _a.x, y = _a.y;\r\n            this.label = this.paper.text(x, y, opt.text);\r\n            this.sets = this.paper.set();\r\n            this.sets.push(this.c, this.label);\r\n        }\r\n    };\r\n    /**\r\n     * 通过选项映射到节点属性\r\n     */\r\n    NodeTask.prototype.opt2Attr = function (nOpt) {\r\n        var opt = nOpt ? nOpt : this.opt, x = opt.cx - opt.w / 2, y = opt.cy - opt.h / 2, w = opt.w, h = opt.h;\r\n        return {\r\n            x: x, y: y, w: w, h: h\r\n        };\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeTask.prototype.updAttr = function (nOpt) {\r\n        this._updAttr(nOpt);\r\n        var opt = this.opt2Attr();\r\n        var cAttr = {\r\n            x: opt.x,\r\n            y: opt.y,\r\n            width: opt.w,\r\n            height: opt.h\r\n        };\r\n        this.c.attr(cAttr);\r\n        this.updTextAttr(nOpt.text); // 文字\r\n        this.onSize();\r\n        return this;\r\n    };\r\n    /**\r\n     * 获取 icon 坐标地址\r\n     */\r\n    NodeTask.prototype.getIconP = function () {\r\n        var p, _a = this.opt, cx = _a.cx, cy = _a.cy, w = _a.w, h = _a.h;\r\n        var d = 2;\r\n        var x = cx - w / 2 + d, y = cy - h / 2 + d;\r\n        p = { x: x, y: y };\r\n        return p;\r\n    };\r\n    return NodeTask;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeTask);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeTask.ts?");

/***/ }),

/***/ "./src/node/NodeText.ts":
/*!******************************!*\
  !*** ./src/node/NodeText.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _NodeAbstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeAbstract */ \"./src/node/NodeAbstract.ts\");\n/**\r\n * 2018年4月19日 星期四\r\n * 文本节点\r\n */\r\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar NodeText = /** @class */ (function (_super) {\r\n    __extends(NodeText, _super);\r\n    function NodeText() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NodeText.prototype._onInit = function () {\r\n        this.NodeType = 'text';\r\n    };\r\n    NodeText.prototype._whenCreatorEvt = function () {\r\n        var opt = this.opt, cx = opt.cx, cy = opt.cy, text = opt.text;\r\n        this.c = this.paper.text(cx, cy, text);\r\n    };\r\n    /**\r\n     * 更新属性\r\n     * @param nOpt\r\n     */\r\n    NodeText.prototype.updAttr = function (nOpt) {\r\n        this._updAttr(nOpt);\r\n        var opt = this.opt;\r\n        this.c.attr({\r\n            x: opt.cx,\r\n            y: opt.cy,\r\n            text: opt.text\r\n        });\r\n        return this;\r\n    };\r\n    return NodeText;\r\n}(_NodeAbstract__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeText);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeText.ts?");

/***/ }),

/***/ "./src/node/NodeUtil.ts":
/*!******************************!*\
  !*** ./src/node/NodeUtil.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.ts\");\n\r\n/**\r\n * 2018年4月13日 星期五\r\n * 节点计算算法\r\n */\r\nvar NodeUtil = /** @class */ (function () {\r\n    function NodeUtil() {\r\n    }\r\n    /**\r\n     * 两点转箭头，箭头生成算法\r\n     * @param P1\r\n     * @param P2\r\n     * @param r\r\n     * @param onlyMidPMk 仅仅中间坐标点\r\n     */\r\n    NodeUtil.ps2arrow = function (P1, P2, r, onlyMidPMk) {\r\n        var atan = Math.atan2(P1.y - P2.y, P2.x - P1.x) * (180 / Math.PI);\r\n        var centerX = P2.x - r * Math.cos(atan * (Math.PI / 180));\r\n        var centerY = P2.y + r * Math.sin(atan * (Math.PI / 180));\r\n        var x2 = centerX + r * Math.cos((atan + 120) * (Math.PI / 180));\r\n        var y2 = centerY - r * Math.sin((atan + 120) * (Math.PI / 180));\r\n        var x3 = centerX + r * Math.cos((atan + 240) * (Math.PI / 180));\r\n        var y3 = centerY - r * Math.sin((atan + 240) * (Math.PI / 180));\r\n        var pV1 = [P2], pV2 = [\r\n            { x: x2, y: y2 },\r\n            { x: x3, y: y3 },\r\n            P2\r\n        ];\r\n        if (onlyMidPMk) {\r\n            pV1 = pV2;\r\n        }\r\n        else {\r\n            pV1 = pV1.concat(pV2);\r\n        }\r\n        return pV1;\r\n    };\r\n    /**\r\n     * 获取两点间的距离\r\n     */\r\n    NodeUtil.getPLen = function (P1, P2) {\r\n        return Math.pow((Math.pow((P1.x - P2.x), 2) + Math.pow((P1.y - P2.y), 2)), 1 / 2);\r\n    };\r\n    /**\r\n     * 点转折线\r\n     * @param P1 地点\r\n     * @param P2 终点\r\n     * @param isYFirst 先移动Y轴\r\n     */\r\n    NodeUtil.point2Poly = function (P1, P2, isYFirst) {\r\n        var tP;\r\n        if (P1.x != P2.x && P1.y != P2.y) {\r\n            if (isYFirst) {\r\n                tP = { x: P1.x, y: P2.y };\r\n            }\r\n            else {\r\n                tP = { x: P2.x, y: P1.y };\r\n            }\r\n        }\r\n        return tP;\r\n    };\r\n    /**\r\n     * 点连线装换为path字符串\r\n     * @param {array} pQue\r\n     * @param {bool} isClose\r\n     * @returns {string}\r\n     */\r\n    NodeUtil.ps2Path = function (pQue, isClose) {\r\n        var path = '';\r\n        for (var i = 0; i < pQue.length; i++) {\r\n            path += (path ? 'L' : 'M') + pQue[i].x + ',' + pQue[i].y;\r\n        }\r\n        if (isClose) {\r\n            path += 'Z';\r\n        }\r\n        return path;\r\n    };\r\n    /**\r\n     * 元素类型转节点\r\n     * @param elem\r\n     */\r\n    NodeUtil.path2ps = function (elem) {\r\n        var tPs = [];\r\n        _util__WEBPACK_IMPORTED_MODULE_0__[\"Util\"].each(elem.attr('path'), function (idx, row) {\r\n            tPs.push({ x: row[1], y: row[2] });\r\n        });\r\n        return tPs;\r\n    };\r\n    /**\r\n     * 点连线转换为字符串数组\r\n     * @param {array} pQue\r\n     * @param {bool} isClose\r\n     * @returns {array} string[]\r\n     */\r\n    NodeUtil.ps2PathAttr = function (pQue, isClose) {\r\n        var pArr = [];\r\n        for (var i = 0; i < pQue.length; i++) {\r\n            var cPArr = ['L'];\r\n            if (pArr.length == 0) {\r\n                cPArr[0] = 'M';\r\n            }\r\n            cPArr.push(pQue[i].x, pQue[i].y);\r\n            pArr.push(cPArr);\r\n        }\r\n        if (isClose) {\r\n            pArr.push(['Z']);\r\n        }\r\n        return pArr;\r\n    };\r\n    /**\r\n     * 获取中间点坐标\r\n     * @param p0\r\n     * @param p1\r\n     */\r\n    NodeUtil.middP = function (p0, p1) {\r\n        return { x: (p0.x + p1.x) / 2, y: (p0.y + p1.y) / 2 };\r\n    };\r\n    /**\r\n     * 获取中间点坐标\r\n     * @param p0\r\n     * @param p1\r\n     * @param type 类型 : ua/上角, la/下角\r\n     */\r\n    NodeUtil.polyP = function (p0, p1, type) {\r\n        var p;\r\n        type = type ? type.toLowerCase() : 'la';\r\n        if (p0.x != p1.x && p0.y != p1.y) {\r\n            if ('ua' == type) {\r\n                p = { x: p1.x, y: p0.y };\r\n            }\r\n            else if ('la' == type) {\r\n                p = { x: p0.x, y: p1.y };\r\n            }\r\n        }\r\n        return p;\r\n    };\r\n    return NodeUtil;\r\n}());\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (NodeUtil);\r\n\n\n//# sourceURL=webpack:///./src/node/NodeUtil.ts?");

/***/ }),

/***/ "./src/util.ts":
/*!*********************!*\
  !*** ./src/util.ts ***!
  \*********************/
/*! exports provided: Util */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Util\", function() { return Util; });\n///<reference path='../index.d.ts' />\r\nvar Util = /** @class */ (function () {\r\n    function Util() {\r\n    }\r\n    /**\r\n     * 对象复制\r\n     * @param {object} t1\r\n     */\r\n    Util.clone = function (t1) {\r\n        t1 = 'object' == typeof t1 ? t1 : {};\r\n        var obj = {};\r\n        return $.extend(true, obj, t1);\r\n    };\r\n    /**\r\n     * 数据合并相同的元素\r\n     * @param {*} array\r\n     */\r\n    Util.ArrayMergeSameValue = function (array) {\r\n        if ('object' == typeof array && array.length && array.length > 1) {\r\n            var valueMap = {};\r\n            var newArray = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                if (valueMap[array[i]]) {\r\n                    continue;\r\n                }\r\n                newArray.push(array[i]);\r\n                valueMap[array[i]] = true;\r\n            }\r\n            array = newArray;\r\n        }\r\n        return array;\r\n    };\r\n    /**\r\n     * @param {array|object} obj\r\n     * @param {function} callback (k, v)\r\n     */\r\n    Util.each = function (obj, callback) {\r\n        if ('object' == typeof obj) {\r\n            if (this.isArray(obj)) {\r\n                for (var i = 0; i < obj.length; i++) {\r\n                    if (false === callback(i, obj[i])) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (var k in obj) {\r\n                    if (false === callback(k, obj[k])) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 字符首字母大写切换，test_case => TestCase, longtext => Longtext\r\n     * @param {string} str\r\n     */\r\n    Util.ucFirst = function (str, delimter) {\r\n        delimter = delimter ? delimter : '_';\r\n        var strQue = str.split(delimter);\r\n        strQue.forEach(function (v, idx) {\r\n            strQue[idx] = v.substr(0, 1).toUpperCase() + v.substr(1);\r\n        });\r\n        return strQue.join('');\r\n    };\r\n    /**\r\n     * 判断是否是数组\r\n     * @param {*} value\r\n     */\r\n    Util.isArray = function (value) {\r\n        if ('object' == typeof value) {\r\n            return value instanceof Array;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * json 数据合并\r\n     * @param bjson\r\n     * @param mjson\r\n     */\r\n    Util.jsonMerge = function (bjson, mjson) {\r\n        bjson = bjson ? bjson : {};\r\n        Util.each(mjson, function (k, v) {\r\n            bjson[k] = v;\r\n        });\r\n        return bjson;\r\n    };\r\n    /**\r\n     * @param json\r\n     */\r\n    Util.jsonValues = function (json) {\r\n        var value = [];\r\n        Util.each(json, function (k, v) {\r\n            value.push(v);\r\n        });\r\n        return value;\r\n    };\r\n    /**\r\n     * 获取子数组\r\n     * @param arr\r\n     * @param start\r\n     * @param end\r\n     */\r\n    Util.subArray = function (arr, start, end) {\r\n        var nArr = [], len = arr.length;\r\n        end = end ? end : arr.length - 1;\r\n        start = start ? start : 0;\r\n        if (end < 0) {\r\n            end = len + end - 1;\r\n        }\r\n        for (var i = 0; i < len; i++) {\r\n            // console.log(i >= start && i >= end, `${i} >= ${start} && ${i} >= ${end}`)\r\n            if (i >= start && i <= end) {\r\n                nArr.push(arr[i]);\r\n            }\r\n        }\r\n        return nArr;\r\n    };\r\n    /**\r\n     * 是否存在代码\r\n     * @param v\r\n     * @param arr\r\n     */\r\n    Util.inArray = function (v, arr) {\r\n        arr = arr ? arr : [];\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (v == arr[i]) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * 数组合并\r\n     * @param arrs\r\n     */\r\n    Util.MergeArr = function () {\r\n        var arrs = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            arrs[_i] = arguments[_i];\r\n        }\r\n        var newArr = [];\r\n        for (var i = 0; i < arrs.length; i++) {\r\n            var arr = arrs[i];\r\n            arr = 'object' == typeof arr ? arr : [arr];\r\n            // let tArr: any[] = []\r\n            // newArr = tArr.concat(newArr, arr)\r\n            newArr = newArr.concat(arr);\r\n        }\r\n        return newArr;\r\n    };\r\n    return Util;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack:///./src/util.ts?");

/***/ }),

/***/ "./test/flow/editor.js":
/*!*****************************!*\
  !*** ./test/flow/editor.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_WorkerEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/WorkerEditor */ \"./src/WorkerEditor.ts\");\n/**\r\n * 工作流程编辑器\r\n */\r\n\r\n\r\n$(function(){\r\n    var $worker = new _src_WorkerEditor__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\r\n        dom: '#workflow',\r\n        // noToolBar: true\r\n    })\r\n    // 暴露用于测试\r\n    window.$worker = $worker\r\n})\r\n\r\nwindow.workerflow = _src_WorkerEditor__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n\n//# sourceURL=webpack:///./test/flow/editor.js?");

/***/ }),

/***/ "./version.ts":
/*!********************!*\
  !*** ./version.ts ***!
  \********************/
/*! exports provided: LibVersion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LibVersion\", function() { return LibVersion; });\nvar LibVersion = { \"version\": \"2.2.11\", \"release\": \"20180710\", \"author\": \"Joshua Conero\", \"name\": \"zmapp-workflow-ts\" };\r\n\n\n//# sourceURL=webpack:///./version.ts?");

/***/ })

/******/ });